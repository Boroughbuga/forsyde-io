def _dumpXMI(self, elem = etree.Element('[%=class.name%]')):
    [%for (attr in class.getFeatures().select(f : ForSyDe!EAttribute | true)) {%]
    if self.[%=attr.name%]:
        elem.set('[%=attr.name%]', str(self.[%=attr.name%]))
    [%}%]
    [%for (ref in class.getFeatures().select(f : ForSyDe!EReference | f.containment = false)) {%]
    [%if (ref.upperBound = 1) {%]
    elem.set('[%=ref.name%]', self.[%=ref.name%].id)
    [%} else {%]
    elem.set('[%=ref.name%]', ' '.join([m.id for m in self.[%=ref.name%]]))
    [%}%]
    [%}%]
    [%for (ref in class.getFeatures().select(f : ForSyDe!EReference | f.containment = true)) {%]
    [%if (ref.upperBound = 1) {%]
    [%if (ref.lowerBound = 0) {%]
    if self.[%=ref.name%]:
        self.[%=ref.name%]._dumpXMI(etree.SubElement(elem, '[%=ref.name%]'))
    [%} else {%]
    self.[%=ref.name%]._dumpXMI(etree.SubElement(elem, '[%=ref.name%]'))
    [%}%]
    [%} else {%]
    for child in self.[%=ref.name%]:
        child._dumpXMI(etree.SubElement(elem, '[%=ref.name%]'))
    [%}%]
    [%}%]
    return elem

[%
@cached
operation ForSyDe!EClass getFeatures() : OrderedSet {
    var features = new OrderedSet;
    for(super in self.eSuperTypes) {
        features.addAll(super.getFeatures());
    }
    features.addAll(self.eStructuralFeatures);
    return features;
}
%]