/*
 * generated by Xtext 2.25.0
 */
grammar InternalMeta;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package io.github.forsyde.io.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package io.github.forsyde.io.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import io.github.forsyde.io.services.MetaGrammarAccess;

}
@parser::members {
	private MetaGrammarAccess grammarAccess;

	public void setGrammarAccess(MetaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getTraitsAssignment()); }
		(rule__Model__TraitsAssignment)*
		{ after(grammarAccess.getModelAccess().getTraitsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTrait
entryRuleVertexTrait
:
{ before(grammarAccess.getVertexTraitRule()); }
	 ruleVertexTrait
{ after(grammarAccess.getVertexTraitRule()); } 
	 EOF 
;

// Rule VertexTrait
ruleVertexTrait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitAccess().getGroup()); }
		(rule__VertexTrait__Group__0)
		{ after(grammarAccess.getVertexTraitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitProperty
entryRuleVertexTraitProperty
:
{ before(grammarAccess.getVertexTraitPropertyRule()); }
	 ruleVertexTraitProperty
{ after(grammarAccess.getVertexTraitPropertyRule()); } 
	 EOF 
;

// Rule VertexTraitProperty
ruleVertexTraitProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitPropertyAccess().getGroup()); }
		(rule__VertexTraitProperty__Group__0)
		{ after(grammarAccess.getVertexTraitPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitPropertyType
entryRuleVertexTraitPropertyType
:
{ before(grammarAccess.getVertexTraitPropertyTypeRule()); }
	 ruleVertexTraitPropertyType
{ after(grammarAccess.getVertexTraitPropertyTypeRule()); } 
	 EOF 
;

// Rule VertexTraitPropertyType
ruleVertexTraitPropertyType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitPropertyTypeAccess().getAlternatives()); }
		(rule__VertexTraitPropertyType__Alternatives)
		{ after(grammarAccess.getVertexTraitPropertyTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitIntProperty
entryRuleVertexTraitIntProperty
:
{ before(grammarAccess.getVertexTraitIntPropertyRule()); }
	 ruleVertexTraitIntProperty
{ after(grammarAccess.getVertexTraitIntPropertyRule()); } 
	 EOF 
;

// Rule VertexTraitIntProperty
ruleVertexTraitIntProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitIntPropertyAccess().getGroup()); }
		(rule__VertexTraitIntProperty__Group__0)
		{ after(grammarAccess.getVertexTraitIntPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitRealProperty
entryRuleVertexTraitRealProperty
:
{ before(grammarAccess.getVertexTraitRealPropertyRule()); }
	 ruleVertexTraitRealProperty
{ after(grammarAccess.getVertexTraitRealPropertyRule()); } 
	 EOF 
;

// Rule VertexTraitRealProperty
ruleVertexTraitRealProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitRealPropertyAccess().getGroup()); }
		(rule__VertexTraitRealProperty__Group__0)
		{ after(grammarAccess.getVertexTraitRealPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitBoolProperty
entryRuleVertexTraitBoolProperty
:
{ before(grammarAccess.getVertexTraitBoolPropertyRule()); }
	 ruleVertexTraitBoolProperty
{ after(grammarAccess.getVertexTraitBoolPropertyRule()); } 
	 EOF 
;

// Rule VertexTraitBoolProperty
ruleVertexTraitBoolProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getGroup()); }
		(rule__VertexTraitBoolProperty__Group__0)
		{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitStringProperty
entryRuleVertexTraitStringProperty
:
{ before(grammarAccess.getVertexTraitStringPropertyRule()); }
	 ruleVertexTraitStringProperty
{ after(grammarAccess.getVertexTraitStringPropertyRule()); } 
	 EOF 
;

// Rule VertexTraitStringProperty
ruleVertexTraitStringProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitStringPropertyAccess().getGroup()); }
		(rule__VertexTraitStringProperty__Group__0)
		{ after(grammarAccess.getVertexTraitStringPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitArrayProperty
entryRuleVertexTraitArrayProperty
:
{ before(grammarAccess.getVertexTraitArrayPropertyRule()); }
	 ruleVertexTraitArrayProperty
{ after(grammarAccess.getVertexTraitArrayPropertyRule()); } 
	 EOF 
;

// Rule VertexTraitArrayProperty
ruleVertexTraitArrayProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitArrayPropertyAccess().getGroup()); }
		(rule__VertexTraitArrayProperty__Group__0)
		{ after(grammarAccess.getVertexTraitArrayPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitObjectProperty
entryRuleVertexTraitObjectProperty
:
{ before(grammarAccess.getVertexTraitObjectPropertyRule()); }
	 ruleVertexTraitObjectProperty
{ after(grammarAccess.getVertexTraitObjectPropertyRule()); } 
	 EOF 
;

// Rule VertexTraitObjectProperty
ruleVertexTraitObjectProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getGroup()); }
		(rule__VertexTraitObjectProperty__Group__0)
		{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexTraitPort
entryRuleVertexTraitPort
:
{ before(grammarAccess.getVertexTraitPortRule()); }
	 ruleVertexTraitPort
{ after(grammarAccess.getVertexTraitPortRule()); } 
	 EOF 
;

// Rule VertexTraitPort
ruleVertexTraitPort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup()); }
		(rule__VertexTraitPort__UnorderedGroup)
		{ after(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEdgeTrait
entryRuleEdgeTrait
:
{ before(grammarAccess.getEdgeTraitRule()); }
	 ruleEdgeTrait
{ after(grammarAccess.getEdgeTraitRule()); } 
	 EOF 
;

// Rule EdgeTrait
ruleEdgeTrait 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEdgeTraitAccess().getGroup()); }
		(rule__EdgeTrait__Group__0)
		{ after(grammarAccess.getEdgeTraitAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEdgeTraitConstraint
entryRuleEdgeTraitConstraint
:
{ before(grammarAccess.getEdgeTraitConstraintRule()); }
	 ruleEdgeTraitConstraint
{ after(grammarAccess.getEdgeTraitConstraintRule()); } 
	 EOF 
;

// Rule EdgeTraitConstraint
ruleEdgeTraitConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEdgeTraitConstraintAccess().getGroup()); }
		(rule__EdgeTraitConstraint__Group__0)
		{ after(grammarAccess.getEdgeTraitConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule VertexTraitPortDirection
ruleVertexTraitPortDirection
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPortDirectionAccess().getAlternatives()); }
		(rule__VertexTraitPortDirection__Alternatives)
		{ after(grammarAccess.getVertexTraitPortDirectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TraitsAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTraitsVertexTraitParserRuleCall_0_0()); }
		ruleVertexTrait
		{ after(grammarAccess.getModelAccess().getTraitsVertexTraitParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getTraitsEdgeTraitParserRuleCall_0_1()); }
		ruleEdgeTrait
		{ after(grammarAccess.getModelAccess().getTraitsEdgeTraitParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPropertyType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitIntPropertyParserRuleCall_0()); }
		ruleVertexTraitIntProperty
		{ after(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitIntPropertyParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitRealPropertyParserRuleCall_1()); }
		ruleVertexTraitRealProperty
		{ after(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitRealPropertyParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitBoolPropertyParserRuleCall_2()); }
		ruleVertexTraitBoolProperty
		{ after(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitBoolPropertyParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitStringPropertyParserRuleCall_3()); }
		ruleVertexTraitStringProperty
		{ after(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitStringPropertyParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitArrayPropertyParserRuleCall_4()); }
		ruleVertexTraitArrayProperty
		{ after(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitArrayPropertyParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitObjectPropertyParserRuleCall_5()); }
		ruleVertexTraitObjectProperty
		{ after(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitObjectPropertyParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitIntPropertyAccess().getIntKeyword_0_0()); }
		'int'
		{ after(grammarAccess.getVertexTraitIntPropertyAccess().getIntKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitIntPropertyAccess().getIntegerKeyword_0_1()); }
		'integer'
		{ after(grammarAccess.getVertexTraitIntPropertyAccess().getIntegerKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitRealPropertyAccess().getFloatKeyword_0_0()); }
		'float'
		{ after(grammarAccess.getVertexTraitRealPropertyAccess().getFloatKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitRealPropertyAccess().getDoubleAssignment_0_1()); }
		(rule__VertexTraitRealProperty__DoubleAssignment_0_1)
		{ after(grammarAccess.getVertexTraitRealPropertyAccess().getDoubleAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getBoolKeyword_0_0()); }
		'bool'
		{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getBoolKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getBooleanKeyword_0_1()); }
		'boolean'
		{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getBooleanKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitStringPropertyAccess().getStringKeyword_0_0()); }
		'string'
		{ after(grammarAccess.getVertexTraitStringPropertyAccess().getStringKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitStringPropertyAccess().getStrKeyword_0_1()); }
		'str'
		{ after(grammarAccess.getVertexTraitStringPropertyAccess().getStrKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitConstraintAccess().getTargetAssignment_1_0()); }
		(rule__EdgeTraitConstraint__TargetAssignment_1_0)
		{ after(grammarAccess.getEdgeTraitConstraintAccess().getTargetAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getEdgeTraitConstraintAccess().getSourceAssignment_1_1()); }
		(rule__EdgeTraitConstraint__SourceAssignment_1_1)
		{ after(grammarAccess.getEdgeTraitConstraintAccess().getSourceAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPortDirection__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_0()); }
		('inout')
		{ after(grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_1()); }
		('outin')
		{ after(grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_2()); }
		('out')
		{ after(grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_3()); }
		('outgoing')
		{ after(grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_4()); }
		('in')
		{ after(grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_5()); }
		('incoming')
		{ after(grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__0__Impl
	rule__VertexTrait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getVertexKeyword_0()); }
	'vertex'
	{ after(grammarAccess.getVertexTraitAccess().getVertexKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__1__Impl
	rule__VertexTrait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getNameAssignment_1()); }
	(rule__VertexTrait__NameAssignment_1)
	{ after(grammarAccess.getVertexTraitAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__2__Impl
	rule__VertexTrait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getGroup_2()); }
	(rule__VertexTrait__Group_2__0)?
	{ after(grammarAccess.getVertexTraitAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__3__Impl
	rule__VertexTrait__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getVertexTraitAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__4__Impl
	rule__VertexTrait__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getPortsAssignment_4()); }
	(rule__VertexTrait__PortsAssignment_4)*
	{ after(grammarAccess.getVertexTraitAccess().getPortsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__5__Impl
	rule__VertexTrait__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getVertexTraitAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__6__Impl
	rule__VertexTrait__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getVertexTraitAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__7__Impl
	rule__VertexTrait__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getPropertiesAssignment_7()); }
	(rule__VertexTrait__PropertiesAssignment_7)*
	{ after(grammarAccess.getVertexTraitAccess().getPropertiesAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getVertexTraitAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTrait__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group_2__0__Impl
	rule__VertexTrait__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getRefinesKeyword_2_0()); }
	'refines'
	{ after(grammarAccess.getVertexTraitAccess().getRefinesKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group_2__1__Impl
	rule__VertexTrait__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getRefinesAssignment_2_1()); }
	(rule__VertexTrait__RefinesAssignment_2_1)
	{ after(grammarAccess.getVertexTraitAccess().getRefinesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getGroup_2_2()); }
	(rule__VertexTrait__Group_2_2__0)*
	{ after(grammarAccess.getVertexTraitAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTrait__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group_2_2__0__Impl
	rule__VertexTrait__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getVertexTraitAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTrait__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitAccess().getRefinesAssignment_2_2_1()); }
	(rule__VertexTrait__RefinesAssignment_2_2_1)
	{ after(grammarAccess.getVertexTraitAccess().getRefinesAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitProperty__Group__0__Impl
	rule__VertexTraitProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPropertyAccess().getPropertyKeyword_0()); }
	'property'
	{ after(grammarAccess.getVertexTraitPropertyAccess().getPropertyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitProperty__Group__1__Impl
	rule__VertexTraitProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPropertyAccess().getNameAssignment_1()); }
	(rule__VertexTraitProperty__NameAssignment_1)
	{ after(grammarAccess.getVertexTraitPropertyAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitProperty__Group__2__Impl
	rule__VertexTraitProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPropertyAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getVertexTraitPropertyAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitProperty__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPropertyAccess().getTypeAssignment_3()); }
	(rule__VertexTraitProperty__TypeAssignment_3)
	{ after(grammarAccess.getVertexTraitPropertyAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitIntProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitIntProperty__Group__0__Impl
	rule__VertexTraitIntProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitIntPropertyAccess().getAlternatives_0()); }
	(rule__VertexTraitIntProperty__Alternatives_0)
	{ after(grammarAccess.getVertexTraitIntPropertyAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitIntProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitIntPropertyAccess().getGroup_1()); }
	(rule__VertexTraitIntProperty__Group_1__0)?
	{ after(grammarAccess.getVertexTraitIntPropertyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitIntProperty__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitIntProperty__Group_1__0__Impl
	rule__VertexTraitIntProperty__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitIntPropertyAccess().getEqualsSignKeyword_1_0()); }
	'='
	{ after(grammarAccess.getVertexTraitIntPropertyAccess().getEqualsSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitIntProperty__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitIntPropertyAccess().getDefaultAssignment_1_1()); }
	(rule__VertexTraitIntProperty__DefaultAssignment_1_1)
	{ after(grammarAccess.getVertexTraitIntPropertyAccess().getDefaultAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitRealProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitRealProperty__Group__0__Impl
	rule__VertexTraitRealProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitRealPropertyAccess().getAlternatives_0()); }
	(rule__VertexTraitRealProperty__Alternatives_0)
	{ after(grammarAccess.getVertexTraitRealPropertyAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitRealProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitRealPropertyAccess().getGroup_1()); }
	(rule__VertexTraitRealProperty__Group_1__0)?
	{ after(grammarAccess.getVertexTraitRealPropertyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitRealProperty__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitRealProperty__Group_1__0__Impl
	rule__VertexTraitRealProperty__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitRealPropertyAccess().getEqualsSignKeyword_1_0()); }
	'='
	{ after(grammarAccess.getVertexTraitRealPropertyAccess().getEqualsSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitRealProperty__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitRealPropertyAccess().getDefaultAssignment_1_1()); }
	(rule__VertexTraitRealProperty__DefaultAssignment_1_1)
	{ after(grammarAccess.getVertexTraitRealPropertyAccess().getDefaultAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitBoolProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitBoolProperty__Group__0__Impl
	rule__VertexTraitBoolProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getAlternatives_0()); }
	(rule__VertexTraitBoolProperty__Alternatives_0)
	{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitBoolProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getGroup_1()); }
	(rule__VertexTraitBoolProperty__Group_1__0)?
	{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitBoolProperty__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitBoolProperty__Group_1__0__Impl
	rule__VertexTraitBoolProperty__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getEqualsSignKeyword_1_0()); }
	'='
	{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getEqualsSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitBoolProperty__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultAssignment_1_1()); }
	(rule__VertexTraitBoolProperty__DefaultAssignment_1_1)
	{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitStringProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitStringProperty__Group__0__Impl
	rule__VertexTraitStringProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitStringPropertyAccess().getAlternatives_0()); }
	(rule__VertexTraitStringProperty__Alternatives_0)
	{ after(grammarAccess.getVertexTraitStringPropertyAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitStringProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitStringPropertyAccess().getGroup_1()); }
	(rule__VertexTraitStringProperty__Group_1__0)?
	{ after(grammarAccess.getVertexTraitStringPropertyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitStringProperty__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitStringProperty__Group_1__0__Impl
	rule__VertexTraitStringProperty__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitStringPropertyAccess().getEqualsSignKeyword_1_0()); }
	'='
	{ after(grammarAccess.getVertexTraitStringPropertyAccess().getEqualsSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitStringProperty__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitStringPropertyAccess().getDefaultAssignment_1_1()); }
	(rule__VertexTraitStringProperty__DefaultAssignment_1_1)
	{ after(grammarAccess.getVertexTraitStringPropertyAccess().getDefaultAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitArrayProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitArrayProperty__Group__0__Impl
	rule__VertexTraitArrayProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitArrayPropertyAccess().getArrayKeyword_0()); }
	'array'
	{ after(grammarAccess.getVertexTraitArrayPropertyAccess().getArrayKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitArrayProperty__Group__1__Impl
	rule__VertexTraitArrayProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitArrayPropertyAccess().getLessThanSignKeyword_1()); }
	'<'
	{ after(grammarAccess.getVertexTraitArrayPropertyAccess().getLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitArrayProperty__Group__2__Impl
	rule__VertexTraitArrayProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitArrayPropertyAccess().getItemTypeAssignment_2()); }
	(rule__VertexTraitArrayProperty__ItemTypeAssignment_2)
	{ after(grammarAccess.getVertexTraitArrayPropertyAccess().getItemTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitArrayProperty__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitArrayPropertyAccess().getGreaterThanSignKeyword_3()); }
	'>'
	{ after(grammarAccess.getVertexTraitArrayPropertyAccess().getGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitObjectProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitObjectProperty__Group__0__Impl
	rule__VertexTraitObjectProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getObjectKeyword_0()); }
	'object'
	{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getObjectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitObjectProperty__Group__1__Impl
	rule__VertexTraitObjectProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getLessThanSignKeyword_1()); }
	'<'
	{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitObjectProperty__Group__2__Impl
	rule__VertexTraitObjectProperty__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getKeyTypeAssignment_2()); }
	(rule__VertexTraitObjectProperty__KeyTypeAssignment_2)
	{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getKeyTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitObjectProperty__Group__3__Impl
	rule__VertexTraitObjectProperty__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitObjectProperty__Group__4__Impl
	rule__VertexTraitObjectProperty__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getValueTypeAssignment_4()); }
	(rule__VertexTraitObjectProperty__ValueTypeAssignment_4)
	{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getValueTypeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitObjectProperty__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getGreaterThanSignKeyword_5()); }
	'>'
	{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getGreaterThanSignKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitPort__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__Group_2__0__Impl
	rule__VertexTraitPort__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPortAccess().getDirectionAssignment_2_0()); }
	(rule__VertexTraitPort__DirectionAssignment_2_0)?
	{ after(grammarAccess.getVertexTraitPortAccess().getDirectionAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__Group_2__1__Impl
	rule__VertexTraitPort__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPortAccess().getPortKeyword_2_1()); }
	'port'
	{ after(grammarAccess.getVertexTraitPortAccess().getPortKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__Group_2__2__Impl
	rule__VertexTraitPort__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPortAccess().getNameAssignment_2_2()); }
	(rule__VertexTraitPort__NameAssignment_2_2)
	{ after(grammarAccess.getVertexTraitPortAccess().getNameAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__Group_2__3__Impl
	rule__VertexTraitPort__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPortAccess().getColonKeyword_2_3()); }
	':'
	{ after(grammarAccess.getVertexTraitPortAccess().getColonKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexTraitPortAccess().getTraitAssignment_2_4()); }
	(rule__VertexTraitPort__TraitAssignment_2_4)
	{ after(grammarAccess.getVertexTraitPortAccess().getTraitAssignment_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeTrait__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group__0__Impl
	rule__EdgeTrait__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getEdgeKeyword_0()); }
	'edge'
	{ after(grammarAccess.getEdgeTraitAccess().getEdgeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group__1__Impl
	rule__EdgeTrait__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getNameAssignment_1()); }
	(rule__EdgeTrait__NameAssignment_1)
	{ after(grammarAccess.getEdgeTraitAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group__2__Impl
	rule__EdgeTrait__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getGroup_2()); }
	(rule__EdgeTrait__Group_2__0)?
	{ after(grammarAccess.getEdgeTraitAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group__3__Impl
	rule__EdgeTrait__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getEdgeTraitAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group__4__Impl
	rule__EdgeTrait__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getSpecsAssignment_4()); }
	(rule__EdgeTrait__SpecsAssignment_4)*
	{ after(grammarAccess.getEdgeTraitAccess().getSpecsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getEdgeTraitAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeTrait__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group_2__0__Impl
	rule__EdgeTrait__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getRefinesKeyword_2_0()); }
	'refines'
	{ after(grammarAccess.getEdgeTraitAccess().getRefinesKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group_2__1__Impl
	rule__EdgeTrait__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getRefinesAssignment_2_1()); }
	(rule__EdgeTrait__RefinesAssignment_2_1)
	{ after(grammarAccess.getEdgeTraitAccess().getRefinesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getGroup_2_2()); }
	(rule__EdgeTrait__Group_2_2__0)*
	{ after(grammarAccess.getEdgeTraitAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeTrait__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group_2_2__0__Impl
	rule__EdgeTrait__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getEdgeTraitAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTrait__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitAccess().getRefinesAssignment_2_2_1()); }
	(rule__EdgeTrait__RefinesAssignment_2_2_1)
	{ after(grammarAccess.getEdgeTraitAccess().getRefinesAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeTraitConstraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTraitConstraint__Group__0__Impl
	rule__EdgeTraitConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitConstraintAccess().getConstraintKeyword_0()); }
	'constraint'
	{ after(grammarAccess.getEdgeTraitConstraintAccess().getConstraintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTraitConstraint__Group__1__Impl
	rule__EdgeTraitConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitConstraintAccess().getAlternatives_1()); }
	(rule__EdgeTraitConstraint__Alternatives_1)
	{ after(grammarAccess.getEdgeTraitConstraintAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTraitConstraint__Group__2__Impl
	rule__EdgeTraitConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitConstraintAccess().getFilterAssignment_2()); }
	(rule__EdgeTraitConstraint__FilterAssignment_2)
	{ after(grammarAccess.getEdgeTraitConstraintAccess().getFilterAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTraitConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitConstraintAccess().getGroup_3()); }
	(rule__EdgeTraitConstraint__Group_3__0)*
	{ after(grammarAccess.getEdgeTraitConstraintAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeTraitConstraint__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTraitConstraint__Group_3__0__Impl
	rule__EdgeTraitConstraint__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitConstraintAccess().getOrKeyword_3_0()); }
	'or'
	{ after(grammarAccess.getEdgeTraitConstraintAccess().getOrKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EdgeTraitConstraint__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEdgeTraitConstraintAccess().getFilterAssignment_3_1()); }
	(rule__EdgeTraitConstraint__FilterAssignment_3_1)
	{ after(grammarAccess.getEdgeTraitConstraintAccess().getFilterAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexTraitPort__UnorderedGroup
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
	}
:
	rule__VertexTraitPort__UnorderedGroup__0
	{getUnorderedGroupHelper().canLeave(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup())}?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getVertexTraitPortAccess().getMultipleAssignment_0()); }
					(rule__VertexTraitPort__MultipleAssignment_0)
					{ after(grammarAccess.getVertexTraitPortAccess().getMultipleAssignment_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getVertexTraitPortAccess().getOrderedAssignment_1()); }
					(rule__VertexTraitPort__OrderedAssignment_1)
					{ after(grammarAccess.getVertexTraitPortAccess().getOrderedAssignment_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getVertexTraitPortAccess().getGroup_2()); }
					(rule__VertexTraitPort__Group_2__0)
					{ after(grammarAccess.getVertexTraitPortAccess().getGroup_2()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__UnorderedGroup__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__UnorderedGroup__Impl
	rule__VertexTraitPort__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__UnorderedGroup__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__UnorderedGroup__Impl
	rule__VertexTraitPort__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__UnorderedGroup__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexTraitPort__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TraitsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTraitsAlternatives_0()); }
		(rule__Model__TraitsAlternatives_0)
		{ after(grammarAccess.getModelAccess().getTraitsAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVertexTraitAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__RefinesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__RefinesAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitCrossReference_2_2_1_0()); }
		(
			{ before(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitIDTerminalRuleCall_2_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitIDTerminalRuleCall_2_2_1_0_1()); }
		)
		{ after(grammarAccess.getVertexTraitAccess().getRefinesVertexTraitCrossReference_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__PortsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitAccess().getPortsVertexTraitPortParserRuleCall_4_0()); }
		ruleVertexTraitPort
		{ after(grammarAccess.getVertexTraitAccess().getPortsVertexTraitPortParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTrait__PropertiesAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitAccess().getPropertiesVertexTraitPropertyParserRuleCall_7_0()); }
		ruleVertexTraitProperty
		{ after(grammarAccess.getVertexTraitAccess().getPropertiesVertexTraitPropertyParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPropertyAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVertexTraitPropertyAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitProperty__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPropertyAccess().getTypeVertexTraitPropertyTypeParserRuleCall_3_0()); }
		ruleVertexTraitPropertyType
		{ after(grammarAccess.getVertexTraitPropertyAccess().getTypeVertexTraitPropertyTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitIntProperty__DefaultAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitIntPropertyAccess().getDefaultINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getVertexTraitIntPropertyAccess().getDefaultINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__DoubleAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitRealPropertyAccess().getDoubleDoubleKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getVertexTraitRealPropertyAccess().getDoubleDoubleKeyword_0_1_0()); }
			'double'
			{ after(grammarAccess.getVertexTraitRealPropertyAccess().getDoubleDoubleKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getVertexTraitRealPropertyAccess().getDoubleDoubleKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitRealProperty__DefaultAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitRealPropertyAccess().getDefaultSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getVertexTraitRealPropertyAccess().getDefaultSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitBoolProperty__DefaultAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultTrueKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultTrueKeyword_1_1_0()); }
			'true'
			{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultTrueKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultTrueKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitStringProperty__DefaultAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitStringPropertyAccess().getDefaultSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getVertexTraitStringPropertyAccess().getDefaultSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitArrayProperty__ItemTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitArrayPropertyAccess().getItemTypeVertexTraitPropertyTypeParserRuleCall_2_0()); }
		ruleVertexTraitPropertyType
		{ after(grammarAccess.getVertexTraitArrayPropertyAccess().getItemTypeVertexTraitPropertyTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__KeyTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getKeyTypeVertexTraitPropertyTypeParserRuleCall_2_0()); }
		ruleVertexTraitPropertyType
		{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getKeyTypeVertexTraitPropertyTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitObjectProperty__ValueTypeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitObjectPropertyAccess().getValueTypeVertexTraitPropertyTypeParserRuleCall_4_0()); }
		ruleVertexTraitPropertyType
		{ after(grammarAccess.getVertexTraitObjectPropertyAccess().getValueTypeVertexTraitPropertyTypeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__MultipleAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPortAccess().getMultipleMultipleKeyword_0_0()); }
		(
			{ before(grammarAccess.getVertexTraitPortAccess().getMultipleMultipleKeyword_0_0()); }
			'multiple'
			{ after(grammarAccess.getVertexTraitPortAccess().getMultipleMultipleKeyword_0_0()); }
		)
		{ after(grammarAccess.getVertexTraitPortAccess().getMultipleMultipleKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__OrderedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPortAccess().getOrderedOrderedKeyword_1_0()); }
		(
			{ before(grammarAccess.getVertexTraitPortAccess().getOrderedOrderedKeyword_1_0()); }
			'ordered'
			{ after(grammarAccess.getVertexTraitPortAccess().getOrderedOrderedKeyword_1_0()); }
		)
		{ after(grammarAccess.getVertexTraitPortAccess().getOrderedOrderedKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__DirectionAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPortAccess().getDirectionVertexTraitPortDirectionEnumRuleCall_2_0_0()); }
		ruleVertexTraitPortDirection
		{ after(grammarAccess.getVertexTraitPortAccess().getDirectionVertexTraitPortDirectionEnumRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__NameAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPortAccess().getNameIDTerminalRuleCall_2_2_0()); }
		RULE_ID
		{ after(grammarAccess.getVertexTraitPortAccess().getNameIDTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexTraitPort__TraitAssignment_2_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexTraitPortAccess().getTraitVertexTraitCrossReference_2_4_0()); }
		(
			{ before(grammarAccess.getVertexTraitPortAccess().getTraitVertexTraitIDTerminalRuleCall_2_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVertexTraitPortAccess().getTraitVertexTraitIDTerminalRuleCall_2_4_0_1()); }
		)
		{ after(grammarAccess.getVertexTraitPortAccess().getTraitVertexTraitCrossReference_2_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEdgeTraitAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__RefinesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__RefinesAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitCrossReference_2_2_1_0()); }
		(
			{ before(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitIDTerminalRuleCall_2_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitIDTerminalRuleCall_2_2_1_0_1()); }
		)
		{ after(grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitCrossReference_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTrait__SpecsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitAccess().getSpecsEdgeTraitConstraintParserRuleCall_4_0()); }
		ruleEdgeTraitConstraint
		{ after(grammarAccess.getEdgeTraitAccess().getSpecsEdgeTraitConstraintParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__TargetAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitConstraintAccess().getTargetTargetKeyword_1_0_0()); }
		(
			{ before(grammarAccess.getEdgeTraitConstraintAccess().getTargetTargetKeyword_1_0_0()); }
			'target'
			{ after(grammarAccess.getEdgeTraitConstraintAccess().getTargetTargetKeyword_1_0_0()); }
		)
		{ after(grammarAccess.getEdgeTraitConstraintAccess().getTargetTargetKeyword_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__SourceAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitConstraintAccess().getSourceSourceKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getEdgeTraitConstraintAccess().getSourceSourceKeyword_1_1_0()); }
			'source'
			{ after(grammarAccess.getEdgeTraitConstraintAccess().getSourceSourceKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getEdgeTraitConstraintAccess().getSourceSourceKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__FilterAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitCrossReference_2_0()); }
		(
			{ before(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeTraitConstraint__FilterAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
