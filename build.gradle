/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/tutorial_java_projects.html
 */

plugins {
  id 'java'
  id 'eclipse'
  id 'idea'
  id 'application'
  id "org.xtext.xtend" version "2.0.8"
}

ext {
  artifactName = 'forsyde-io'
}

group = 'forsyde'
version = '0.5.0'

sourceCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // EMF libraries to navigate the ForSyDe EMF
    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore', version: '2.21.0'
    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore.xmi', version: '2.16.0'
    implementation group: 'org.eclipse.emf', name: 'org.eclipse.emf.common', version: '2.18.0'
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.25'
    // Epsilon for the current python generation
    implementation 'org.eclipse.epsilon:epsilon-core:1.5.1'
    implementation 'org.eclipse.epsilon:epsilon-emf:1.5.1'
    implementation 'org.eclipse.epsilon:epsilon-workflow:1.5.1'
    implementation 'org.eclipse.epsilon:epsilon-workflow-emf:1.5.1'

    // libraries required for some minimal XTend stuff.
		implementation 'org.eclipse.xtend:org.eclipse.xtend.lib:2.21.0'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testImplementation 'junit:junit:4.12'
}

application {
    mainClassName = "forsyde.io.generators.Main"
}

eclipse {
  project {
    name = artifactName
  }
}

task clearPackageOutJavaIO(type: Delete) {
  delete './packages-out/java-io'
  followSymlinks = true
}

task makePackageOutJavaIO(type: Copy) {
	dependsOn clearPackageOutJavaIO
	from './packages-in/java-io'
	into './packages-out/java-io'
}

task replaceEcoreIOVersion {
	def pattern = ~/(<.*name="version"(.|\n)*defaultValueLiteral=)"(.+)"/
	def replaced = file('./ecore/forsyde.ecore').text.replaceFirst(pattern, '$1"&quot;' + project.version + '&quot;"')
	file('./ecore/forsyde.ecore').text = replaced 
}

task replaceJavaIOVersion() {
	dependsOn makePackageOutJavaIO
	doLast {
		def replaced = file('./packages-out/java-io/build.gradle').text.replaceFirst(/version = '.+'/, "version = '${version}'")
		file('./packages-out/java-io/build.gradle').text = replaced
	} 
}

/*
task replacePythonIOVersion {
	def replaced = file('./python-io/setup.py').text.replaceFirst(/version='.+'/, "version='${version}'")
	file('./python-io/setup.py').text = replaced
}
*/

tasks.run.dependsOn replaceEcoreIOVersion
tasks.run.dependsOn replaceJavaIOVersion
// tasks.run.dependsOn replacePythonIOVersion