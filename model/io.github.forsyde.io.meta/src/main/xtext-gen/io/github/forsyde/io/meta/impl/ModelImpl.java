/**
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.meta.impl;

import io.github.forsyde.io.meta.MetaPackage;
import io.github.forsyde.io.meta.Model;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * &lt;!-- begin-user-doc --&gt;
 * An implementation of the model object '<em><b>Model</b>&lt;/em&gt;'.
 * &lt;!-- end-user-doc --&gt;
 * &lt; &gt;
 * The following features are implemented:
 * &lt;/p&gt;
 * &lt; &gt;
 *   <li>{@link io.github.forsyde.io.meta.impl.ModelImpl#getTraits <em>Traits</em>}&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getTraits() <em>Traits&lt;/em&gt;}' containment reference list.
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @see #getTraits()
   * @generated
   * @ordered
   */
  protected EList<EObject> traits;

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MetaPackage.Literals.MODEL;
  }

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  @Override
  public EList<EObject> getTraits()
  {
    if (traits == null)
    {
      traits = new EObjectContainmentEList<EObject>(EObject.class, this, MetaPackage.MODEL__TRAITS);
    }
    return traits;
  }

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MetaPackage.MODEL__TRAITS:
        return ((InternalEList<?>)getTraits()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MetaPackage.MODEL__TRAITS:
        return getTraits();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MetaPackage.MODEL__TRAITS:
        getTraits().clear();
        getTraits().addAll((Collection<? extends EObject>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MetaPackage.MODEL__TRAITS:
        getTraits().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * &lt;!-- begin-user-doc --&gt;
   * &lt;!-- end-user-doc --&gt;
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MetaPackage.MODEL__TRAITS:
        return traits != null && !traits.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
