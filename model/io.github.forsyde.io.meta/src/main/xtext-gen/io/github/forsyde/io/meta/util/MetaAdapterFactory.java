/**
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.meta.util;

import io.github.forsyde.io.meta.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see io.github.forsyde.io.meta.MetaPackage
 * @generated
 */
public class MetaAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MetaPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MetaPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MetaSwitch<Adapter> modelSwitch =
    new MetaSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseVertexTrait(VertexTrait object)
      {
        return createVertexTraitAdapter();
      }
      @Override
      public Adapter caseVertexTraitProperty(VertexTraitProperty object)
      {
        return createVertexTraitPropertyAdapter();
      }
      @Override
      public Adapter caseVertexTraitPropertyType(VertexTraitPropertyType object)
      {
        return createVertexTraitPropertyTypeAdapter();
      }
      @Override
      public Adapter caseVertexTraitIntProperty(VertexTraitIntProperty object)
      {
        return createVertexTraitIntPropertyAdapter();
      }
      @Override
      public Adapter caseVertexTraitRealProperty(VertexTraitRealProperty object)
      {
        return createVertexTraitRealPropertyAdapter();
      }
      @Override
      public Adapter caseVertexTraitBoolProperty(VertexTraitBoolProperty object)
      {
        return createVertexTraitBoolPropertyAdapter();
      }
      @Override
      public Adapter caseVertexTraitStringProperty(VertexTraitStringProperty object)
      {
        return createVertexTraitStringPropertyAdapter();
      }
      @Override
      public Adapter caseVertexTraitArrayProperty(VertexTraitArrayProperty object)
      {
        return createVertexTraitArrayPropertyAdapter();
      }
      @Override
      public Adapter caseVertexTraitObjectProperty(VertexTraitObjectProperty object)
      {
        return createVertexTraitObjectPropertyAdapter();
      }
      @Override
      public Adapter caseVertexTraitPort(VertexTraitPort object)
      {
        return createVertexTraitPortAdapter();
      }
      @Override
      public Adapter caseEdgeTrait(EdgeTrait object)
      {
        return createEdgeTraitAdapter();
      }
      @Override
      public Adapter caseEdgeTraitConstraint(EdgeTraitConstraint object)
      {
        return createEdgeTraitConstraintAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTrait <em>Vertex Trait</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTrait
   * @generated
   */
  public Adapter createVertexTraitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitProperty <em>Vertex Trait Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitProperty
   * @generated
   */
  public Adapter createVertexTraitPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitPropertyType <em>Vertex Trait Property Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitPropertyType
   * @generated
   */
  public Adapter createVertexTraitPropertyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitIntProperty <em>Vertex Trait Int Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitIntProperty
   * @generated
   */
  public Adapter createVertexTraitIntPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitRealProperty <em>Vertex Trait Real Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitRealProperty
   * @generated
   */
  public Adapter createVertexTraitRealPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitBoolProperty <em>Vertex Trait Bool Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitBoolProperty
   * @generated
   */
  public Adapter createVertexTraitBoolPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitStringProperty <em>Vertex Trait String Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitStringProperty
   * @generated
   */
  public Adapter createVertexTraitStringPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitArrayProperty <em>Vertex Trait Array Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitArrayProperty
   * @generated
   */
  public Adapter createVertexTraitArrayPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitObjectProperty <em>Vertex Trait Object Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitObjectProperty
   * @generated
   */
  public Adapter createVertexTraitObjectPropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.VertexTraitPort <em>Vertex Trait Port</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.VertexTraitPort
   * @generated
   */
  public Adapter createVertexTraitPortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.EdgeTrait <em>Edge Trait</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.EdgeTrait
   * @generated
   */
  public Adapter createEdgeTraitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link io.github.forsyde.io.meta.EdgeTraitConstraint <em>Edge Trait Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see io.github.forsyde.io.meta.EdgeTraitConstraint
   * @generated
   */
  public Adapter createEdgeTraitConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MetaAdapterFactory
