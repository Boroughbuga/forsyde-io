[%if (class.getSubclasses().size() > 0) {%]
-- | Class '[%=class.name%]' is not a leaf class so it denotes common elements for its children according to forsyde-io.
--   So it is genereted as a typeclass.
class [%=class.name%] where
  [%for (a in class.eStructuralFeatures.select(a : ForSyDe!EAttribute | true)) {%]
  [%=a.name%] :: [%=a.eType.name%]
  [%}%]
  [%for (a in class.eStructuralFeatures.select(a : ForSyDe!EReference | a.eType.hasId() = true)) {%]
 	 [%if (a.upperBound > -1) {%]
  [%=a.name%] :: [%=a.eType.getFeatures().selectOne(a | a.name = 'identifier').eType.name%]
	 [%} else {%]
  [%=a.name%] :: [[%=a.eType.getFeatures().selectOne(a | a.name = 'identifier').eType.name%]]
  	 [%}%]
  [%}%] 
  [%for (a in class.eStructuralFeatures.select(a : ForSyDe!EReference | a.eType.hasId() = false)) {%]
  	[%if (a.upperBound > -1) {%]
  [%=a.name%] :: [%=a.eType.name%]
  	[%} else {%]
  [%=a.name%] :: [[%=a.eType.name%]]
  	[%}%]
  [%}%]
  
[%} else {%]
-- | Class '[%=class.name%]' is a leaf class so it can be generated as a record from forsyde-io. 
data [%=class.name%] = [%=class.name%] {
  [%for (a in class.getFeatures().select(a : ForSyDe!EAttribute | true)) {%]
  	[%if (class.eStructuralFeatures.contains(a)) {%]
  [%=a.name%] :: [%=a.eType.name%],
  	[%} else {%]
  _[%=class.name%]_[%=a.name%] :: [%=a.eType.name%],
  	[%}%]
  [%}%]
  [%for (a in class.getFeatures().select(a : ForSyDe!EReference | a.eType.hasId() = true)) {%]
  	[%if (a.upperBound > -1) {%]
  		[%if (class.eStructuralFeatures.contains(a)) {%]
  [%=a.name%] :: [%=a.eType.getFeatures().selectOne(a | a.name = 'identifier').eType.name%],
  		[%} else {%]
  _[%=class.name%]_[%=a.name%] :: [%=a.eType.getFeatures().selectOne(a | a.name = 'identifier').eType.name%],
  		[%}%]
  	[%} else {%]
  		[%if (class.eStructuralFeatures.contains(a)) {%]
  [%=a.name%] :: [[%=a.eType.getFeatures().selectOne(a | a.name = 'identifier').eType.name%]],
  		[%} else {%]
  _[%=class.name%]_[%=a.name%] :: [[%=a.eType.getFeatures().selectOne(a | a.name = 'identifier').eType.name%]],
  		[%}%]
  	[%}%]
  [%}%] 
  [%for (a in class.eStructuralFeatures.select(a : ForSyDe!EReference | a.eType.hasId() = false)) {%]
  	[%if (a.upperBound > -1) {%]
  		[%if (class.eStructuralFeatures.contains(a)) {%]
  [%=a.name%] :: [%=a.eType.name%],
  		[%} else {%]
  _[%=class.name%]_[%=a.name%] :: [%=a.eType.name%],
  		[%}%]
  	[%} else {%]
  		[%if (class.eStructuralFeatures.contains(a)) {%]
  [%=a.name%] :: [[%=a.eType.name%]],
  		[%} else {%]
  _[%=class.name%]_[%=a.name%] :: [[%=a.eType.name%]],
  		[%}%]
  	[%}%]
  [%}%]
}

[%for (p in class.getAllSuperclasses()) {%]
-- | Class '[%=class.name%]' has '[%=p.name%]' as one of its parent interfaces/superclasses according to forsyde-io.
instance [%=p.name%] [%=class.name%] where
  [%for (a in class.getFeatures().select(aa | p.eStructuralFeatures.contains(aa))) {%]
  [%=a.name%] = _[%=class.name%]_[%=a.name%]
  [%}%] 
[%}%]

[%}%]
[%
operation ForSyDe!EClass hasId() : Boolean {
	return self.getFeatures().exists(a | a.name = 'identifier');
}

@cached
operation ForSyDe!EClass getAllSuperclasses() : Set {
	var classes = new Set;
	var toExplore = new Set;
	toExplore.addAll(self.eSuperTypes);
	while(toExplore.size() > 0) {
		var cur = toExplore.removeAt(0);
		classes.add(cur);
		toExplore.addAll(cur.eSuperTypes);
	}
	return classes;
}

@cached
operation ForSyDe!EClass getFeatures() : OrderedSet {
    var features = new OrderedSet;
    for(super in self.eSuperTypes) {
        features.addAll(super.getFeatures());
    }
    features.addAll(self.eStructuralFeatures);
    return features;
}

@cached
operation ForSyDe!EClass getSubclasses() : Set {
	var classes = new Set;
	for(c in ForSyDe!EClass.allInstances()) {
		if (c.eSuperTypes.contains(self)) {
			classes.add(c);
		}
	}
	return classes;
}

%]