namespace impl {

    vertex Executable

    vertex InstrumentedExecutable refines Executable {
        prop operationRequirements is strmap<strmap<long>>
        prop sizeInBits is long
    }

    vertex ANSICBlackBoxExecutable refines Executable {
        prop inlinedCode is string
    }

    vertex CommunicatingExecutable refines Executable {
        prop portDataReadSize is strmap<long>
        prop portDataWrittenSize is strmap<long>
    }

    vertex DataBlock {
        prop maxSizeInBits is long
    }

    vertex TokenizableDataBlock refines DataBlock {
        prop tokenSizeInBits is long
    }

    edge DataMovement

}

namespace values {
    vertex Value

    vertex IntegerValue refines Value {
        prop intValue is integer
    }
}


namespace typing {

    vertex TypedOperation refines impl::Executable {
        port inputPortTypes is ordered multiple typing::datatypes::DataType with typing::datatypes::DataDefinition
        prop inputPorts is array<string>
        port outputPortTypes is ordered multiple typing::datatypes::DataType with typing::datatypes::DataDefinition
        prop outputPorts is array<string>
    }

    vertex TypedDataBlock refines impl::DataBlock {
        port dataType is out single typing::datatypes::DataType with typing::datatypes::DataDefinition
    }

    namespace datatypes {
        vertex DataType
        vertex Integer refines DataType {
            prop numberOfBits is int
        }
        vertex Float refines DataType
        vertex Double refines DataType
        vertex Array refines DataType {
            prop maximumElems is int
            port innerType is single DataType with DataDefinition
        }
        vertex Record refines DataType {
            port innerTypes is multiple DataType with DataDefinition
        }

        edge DataDefinition
    }
}

namespace moc {

    vertex MoCElem

    edge AbstractionEdge

    vertex MoCSource refines MoCElem {
        prop dataTakenPerExecution is strmap<long>
    }

    vertex ContinousMoCSource refines MoCSource

    vertex PeriodicMoCSource refines MoCSource {
        prop eventPeriodNumerator is long
        prop eventPeriodDenominator is long
    }

    vertex MoCSink refines MoCElem {
        prop dataWritenPerExecution is strmap<long>
    }

    namespace linguafranca {
        vertex LinguaFrancaElem refines moc::MoCElem

        vertex LinguaFrancaTimer refines LinguaFrancaElem {
            prop periodNumeratorInSec is int
            prop periodDenominatorInSec is int
            prop offsetNumeratorInSec is long
            prop offsetDenominatorInSec is long
        }

        vertex LinguaFrancaReaction refines LinguaFrancaElem {
            prop sizeInBits is long

            port implementation is single impl::Executable
        }

        vertex LinguaFrancaReactor refines LinguaFrancaElem {
            prop stateSizesInBits is array<long>
            prop stateNames is array<str>

            port childrenReactors is multiple ordered LinguaFrancaReactor
            port reactions is multiple ordered LinguaFrancaReaction
            port timers is multiple unordered LinguaFrancaTimer
        }

        vertex LinguaFrancaSignal refines LinguaFrancaElem {
            prop sizeInBits is long
            prop propagationDelayInSecsNumerator is long
            prop propagationDelayInSecsDenominator is long
        }

        edge ContainmentEdge refines moc::AbstractionEdge

        edge EventEdge
    }

    namespace sdf {

        vertex SDFElem refines moc::MoCElem

        vertex SDFActor refines SDFElem {
            prop consumption is strmap<int>
            prop production is strmap<int>

            port combFunctions is multiple out impl::Executable with moc::AbstractionEdge
        }

        vertex SDFChannel refines SDFElem {
            prop numOfInitialTokens is int = 0_i

            port producer is single in SDFActor with SDFDataEdge
            port consumer is single out SDFActor with SDFDataEdge
            port initialTokenValues is ordered multiple out values::Value
        }

        edge SDFDataEdge {
            source SDFElem
            target SDFElem
        }

    }

}

namespace parallel {
    vertex ParallelSkeleton refines impl::Executable

    edge ParallelContainerEdge

    vertex Map refines ParallelSkeleton {
        port kernel is single output impl::Executable with ParallelContainerEdge
    }

    vertex Reduce refines ParallelSkeleton {
        port kernel is single output impl::Executable with ParallelContainerEdge
    }
}

namespace execution {
    vertex Stimulatable {
        prop hasORSemantics is bool = 0_b
        port activators is multiple in Stimulator with EventEdge
    }

    vertex Stimulator {
        port activated is multiple out Stimulatable with EventEdge
    }

    vertex PeriodicStimulus refines Stimulator {
        prop periodNumerator is long
        prop periodDenominator is long = 1_l
        prop offsetNumerator is long = 0_l
        prop offsetDenominator is long = 1_l
    }

    vertex ContinousStimulus refines Stimulator

    vertex Downsample refines Stimulatable, Stimulator {
        prop initialPredecessorSkips is long = 0_l
        prop repetitivePredecessorSkips is long = 0_l
    }

    vertex Upsample refines Stimulatable, Stimulator {
        prop initialPredecessorHolds is long = 0_l
        prop repetitivePredecessorHolds is long = 0_l
    }

    vertex Task refines Stimulatable, Stimulator

    vertex LoopingTask refines Task {
        port initSequence is multiple ordered out impl::Executable with ExecutionEdge
        port loopSequence is multiple ordered out impl::Executable with ExecutionEdge
    }

    vertex CommunicatingTask refines Task {
        prop portDataReadSize is strmap<long>
        prop portDataWrittenSize is strmap<long>
    }

    vertex ConstrainedTask refines Task {
        prop relativeDeadlineNumerator is long
        prop relativeDeadlineDenominator is long = 1_l
    }

    edge EventEdge

    edge ExecutionEdge

}

namespace platform {

    vertex PlatformElem

    vertex AbstractStructure refines PlatformElem {
        port submodules is multiple PlatformElem
    }

    vertex DigitalModule refines PlatformElem {
        prop operatingFrequencyInHertz is long
    }

    vertex SynthetizableDigitalPorts refines DigitalModule {
        prop portProtocolAcronym is strmap<string>
        prop portIsInitiator is strmap<bool>
        prop portWidthInBits is strmap<int>
    }

    vertex GenericProcessingModule refines DigitalModule

    vertex GenericCommunicationModule refines DigitalModule

    vertex GenericMemoryModule refines DigitalModule {
        prop spaceInBits is long
    }

    vertex GenericCacheModule refines DigitalModule {

    }

    vertex InstrumentedProcessingModule refines GenericProcessingModule {
        prop modalInstructionsPerCycle is strmap<strmap<double>>
    }

    vertex InstrumentedCommunicationModule refines GenericCommunicationModule {
        prop flitSizeInBits is long
        prop maxCyclesPerFlit is int
        prop maxConcurrentFlits is int
        prop initialLatency is long
    }

    vertex RoundRobinCommunicationModule refines InstrumentedCommunicationModule {
        prop allocatedWeights is strmap<int>
        prop totalWeights is int
    }

    edge StructuralConnection

    edge PhysicalConnection

    namespace runtime {
        vertex AbstractScheduler

        vertex CyclicExecutiveScheduler refines AbstractScheduler {
            prop entries is array<string>
        }

        vertex StaticCyclicScheduler refines CyclicExecutiveScheduler {

        }

        vertex FixedPriorityScheduler refines AbstractScheduler {
            prop preemptive is boolean
        }

        vertex RoundRobinScheduler refines AbstractScheduler {
            prop maximumTimeSliceInCycles is long
            prop minimumTimeSliceInCycles is long
            prop maximumTimeSlices is int
        }

        vertex TimeTriggeredScheduler refines AbstractScheduler {

        }
    }

}

namespace nonfunctional {

    vertex NonFunctionalRequirement

    vertex ColocationRequirement refines NonFunctionalRequirement {
        prop coLocationGroups is array<int>

        port covered is multiple out execution::Task
    }

    vertex UtilizationBoundedProcessingElem refines NonFunctionalRequirement, platform::GenericProcessingModule {
        prop maxUtilizationNumerator is long
        prop maxUtilizationDenominator is long
    }
}

namespace decision {
    edge AbstractMapping

    edge AbstractAllocation

    edge AbstractScheduling

    vertex Allocated {
        port allocationHosts is out multiple unordered platform::DigitalModule
    }

    vertex MemoryMapped refines Allocated {
        port mappingHosts is out multiple unordered platform::GenericMemoryModule
    }

    vertex Scheduled {
        port schedulers is out multiple unordered platform::runtime::AbstractScheduler
    }

    namespace sdf {
        vertex PASSedSDFActor refines moc::sdf::SDFActor {
            prop firingSlots is array<int>
        }

        vertex BoundedSDFChannel refines moc::sdf::SDFChannel {
            prop maximumTokens is int
        }
    }

    namespace results {
        vertex AnalysedTask refines execution::Task {
            prop worstCaseResponseTimeNumeratorInSecs is long
            prop worstCaseResponseTimeDenominatorInSecs is long
            prop worstCaseBlockingTimeNumeratorInSecs is long
            prop worstCaseBlockingTimeDenominatorInSecs is long
        }

        vertex StaticCycleEntry refines execution::Task {
            prop staticOrderEntry is int
        }

        vertex AnalysedGenericProcessingModule refines platform::GenericProcessingModule {
            prop utilization is double
        }
    }

}

namespace visualization {

    edge VisualContainment

    edge VisualConnection

    vertex Visualizable

    vertex Positioned refines Visualizable {
        prop positionX is int
        prop positionY is int
    }

    vertex GreyBox refines Visualizable {
        port contained is multiple out Visualizable
    }

}