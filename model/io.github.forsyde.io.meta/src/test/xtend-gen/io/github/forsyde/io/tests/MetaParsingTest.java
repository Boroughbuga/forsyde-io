/**
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.tests;

import com.google.inject.Inject;
import io.github.forsyde.io.generator.JavaMetaGenerator;
import io.github.forsyde.io.meta.Model;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MetaInjectorProvider.class)
@SuppressWarnings("all")
public class MetaParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Inject
  private JavaMetaGenerator javaMetaGenerator;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("vertex ReactorElement () {}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("vertex ReactorTimer refines ReactorElement () {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("property period_numerator_per_sec: int");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("property period_denominator_per_sec: int = 1\t\t\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("vertex ReactorActor refines ReactorElement (");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("multiple port children: ReactorElement");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("multiple port timers: ReactorTimer");
      _builder.newLine();
      _builder.append(")");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append(" \t\t\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("edge ReactorConnection {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("constraint source ReactorElement");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("constraint target ReactorElement\t\t\t\t");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final String enumStr = this.javaMetaGenerator.generateVertexTraitEnum(result).toString();
      InputOutput.<String>println(enumStr);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
