/*
 * generated by Xtext 2.25.0
 */
grammar InternalMeta;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package io.github.forsyde.io.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package io.github.forsyde.io.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import io.github.forsyde.io.services.MetaGrammarAccess;

}

@parser::members {

 	private MetaGrammarAccess grammarAccess;

    public InternalMetaParser(TokenStream input, MetaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MetaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTraitsVertexTraitParserRuleCall_0_0());
				}
				lv_traits_0_1=ruleVertexTrait
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"traits",
						lv_traits_0_1,
						"io.github.forsyde.io.Meta.VertexTrait");
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getModelAccess().getTraitsEdgeTraitParserRuleCall_0_1());
				}
				lv_traits_0_2=ruleEdgeTrait
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"traits",
						lv_traits_0_2,
						"io.github.forsyde.io.Meta.EdgeTrait");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleVertexTrait
entryRuleVertexTrait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitRule()); }
	iv_ruleVertexTrait=ruleVertexTrait
	{ $current=$iv_ruleVertexTrait.current; }
	EOF;

// Rule VertexTrait
ruleVertexTrait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='vertex'
		{
			newLeafNode(otherlv_0, grammarAccess.getVertexTraitAccess().getVertexKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVertexTraitAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVertexTraitRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='refines'
			{
				newLeafNode(otherlv_2, grammarAccess.getVertexTraitAccess().getRefinesKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVertexTraitRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getVertexTraitAccess().getRefinesVertexTraitCrossReference_2_1_0());
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getVertexTraitAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVertexTraitRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getVertexTraitAccess().getRefinesVertexTraitCrossReference_2_2_1_0());
						}
					)
				)
			)*
		)?
		otherlv_6='('
		{
			newLeafNode(otherlv_6, grammarAccess.getVertexTraitAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexTraitAccess().getPortsVertexTraitPortParserRuleCall_4_0());
				}
				lv_ports_7_0=ruleVertexTraitPort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexTraitRule());
					}
					add(
						$current,
						"ports",
						lv_ports_7_0,
						"io.github.forsyde.io.Meta.VertexTraitPort");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getVertexTraitAccess().getRightParenthesisKeyword_5());
		}
		otherlv_9='{'
		{
			newLeafNode(otherlv_9, grammarAccess.getVertexTraitAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexTraitAccess().getPropertiesVertexTraitPropertyParserRuleCall_7_0());
				}
				lv_properties_10_0=ruleVertexTraitProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexTraitRule());
					}
					add(
						$current,
						"properties",
						lv_properties_10_0,
						"io.github.forsyde.io.Meta.VertexTraitProperty");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getVertexTraitAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleVertexTraitProperty
entryRuleVertexTraitProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitPropertyRule()); }
	iv_ruleVertexTraitProperty=ruleVertexTraitProperty
	{ $current=$iv_ruleVertexTraitProperty.current; }
	EOF;

// Rule VertexTraitProperty
ruleVertexTraitProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='property'
		{
			newLeafNode(otherlv_0, grammarAccess.getVertexTraitPropertyAccess().getPropertyKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVertexTraitPropertyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVertexTraitPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVertexTraitPropertyAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexTraitPropertyAccess().getTypeVertexTraitPropertyTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleVertexTraitPropertyType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexTraitPropertyRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"io.github.forsyde.io.Meta.VertexTraitPropertyType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVertexTraitPropertyType
entryRuleVertexTraitPropertyType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitPropertyTypeRule()); }
	iv_ruleVertexTraitPropertyType=ruleVertexTraitPropertyType
	{ $current=$iv_ruleVertexTraitPropertyType.current; }
	EOF;

// Rule VertexTraitPropertyType
ruleVertexTraitPropertyType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitIntPropertyParserRuleCall_0());
		}
		this_VertexTraitIntProperty_0=ruleVertexTraitIntProperty
		{
			$current = $this_VertexTraitIntProperty_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitRealPropertyParserRuleCall_1());
		}
		this_VertexTraitRealProperty_1=ruleVertexTraitRealProperty
		{
			$current = $this_VertexTraitRealProperty_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitBoolPropertyParserRuleCall_2());
		}
		this_VertexTraitBoolProperty_2=ruleVertexTraitBoolProperty
		{
			$current = $this_VertexTraitBoolProperty_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitStringPropertyParserRuleCall_3());
		}
		this_VertexTraitStringProperty_3=ruleVertexTraitStringProperty
		{
			$current = $this_VertexTraitStringProperty_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitArrayPropertyParserRuleCall_4());
		}
		this_VertexTraitArrayProperty_4=ruleVertexTraitArrayProperty
		{
			$current = $this_VertexTraitArrayProperty_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVertexTraitPropertyTypeAccess().getVertexTraitObjectPropertyParserRuleCall_5());
		}
		this_VertexTraitObjectProperty_5=ruleVertexTraitObjectProperty
		{
			$current = $this_VertexTraitObjectProperty_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVertexTraitIntProperty
entryRuleVertexTraitIntProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitIntPropertyRule()); }
	iv_ruleVertexTraitIntProperty=ruleVertexTraitIntProperty
	{ $current=$iv_ruleVertexTraitIntProperty.current; }
	EOF;

// Rule VertexTraitIntProperty
ruleVertexTraitIntProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='int'
			{
				newLeafNode(otherlv_0, grammarAccess.getVertexTraitIntPropertyAccess().getIntKeyword_0_0());
			}
			    |
			otherlv_1='integer'
			{
				newLeafNode(otherlv_1, grammarAccess.getVertexTraitIntPropertyAccess().getIntegerKeyword_0_1());
			}
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVertexTraitIntPropertyAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					lv_default_3_0=RULE_INT
					{
						newLeafNode(lv_default_3_0, grammarAccess.getVertexTraitIntPropertyAccess().getDefaultINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVertexTraitIntPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"default",
							lv_default_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVertexTraitRealProperty
entryRuleVertexTraitRealProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitRealPropertyRule()); }
	iv_ruleVertexTraitRealProperty=ruleVertexTraitRealProperty
	{ $current=$iv_ruleVertexTraitRealProperty.current; }
	EOF;

// Rule VertexTraitRealProperty
ruleVertexTraitRealProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='float'
			{
				newLeafNode(otherlv_0, grammarAccess.getVertexTraitRealPropertyAccess().getFloatKeyword_0_0());
			}
			    |
			(
				(
					lv_double_1_0='double'
					{
						newLeafNode(lv_double_1_0, grammarAccess.getVertexTraitRealPropertyAccess().getDoubleDoubleKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVertexTraitRealPropertyRule());
						}
						setWithLastConsumed($current, "double", lv_double_1_0 != null, "double");
					}
				)
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVertexTraitRealPropertyAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					lv_default_3_0=RULE_STRING
					{
						newLeafNode(lv_default_3_0, grammarAccess.getVertexTraitRealPropertyAccess().getDefaultSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVertexTraitRealPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"default",
							lv_default_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVertexTraitBoolProperty
entryRuleVertexTraitBoolProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitBoolPropertyRule()); }
	iv_ruleVertexTraitBoolProperty=ruleVertexTraitBoolProperty
	{ $current=$iv_ruleVertexTraitBoolProperty.current; }
	EOF;

// Rule VertexTraitBoolProperty
ruleVertexTraitBoolProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='bool'
			{
				newLeafNode(otherlv_0, grammarAccess.getVertexTraitBoolPropertyAccess().getBoolKeyword_0_0());
			}
			    |
			otherlv_1='boolean'
			{
				newLeafNode(otherlv_1, grammarAccess.getVertexTraitBoolPropertyAccess().getBooleanKeyword_0_1());
			}
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVertexTraitBoolPropertyAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					lv_default_3_0='true'
					{
						newLeafNode(lv_default_3_0, grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultTrueKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVertexTraitBoolPropertyRule());
						}
						setWithLastConsumed($current, "default", lv_default_3_0 != null, "true");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVertexTraitStringProperty
entryRuleVertexTraitStringProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitStringPropertyRule()); }
	iv_ruleVertexTraitStringProperty=ruleVertexTraitStringProperty
	{ $current=$iv_ruleVertexTraitStringProperty.current; }
	EOF;

// Rule VertexTraitStringProperty
ruleVertexTraitStringProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='string'
			{
				newLeafNode(otherlv_0, grammarAccess.getVertexTraitStringPropertyAccess().getStringKeyword_0_0());
			}
			    |
			otherlv_1='str'
			{
				newLeafNode(otherlv_1, grammarAccess.getVertexTraitStringPropertyAccess().getStrKeyword_0_1());
			}
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVertexTraitStringPropertyAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					lv_default_3_0=RULE_STRING
					{
						newLeafNode(lv_default_3_0, grammarAccess.getVertexTraitStringPropertyAccess().getDefaultSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVertexTraitStringPropertyRule());
						}
						setWithLastConsumed(
							$current,
							"default",
							lv_default_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVertexTraitArrayProperty
entryRuleVertexTraitArrayProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitArrayPropertyRule()); }
	iv_ruleVertexTraitArrayProperty=ruleVertexTraitArrayProperty
	{ $current=$iv_ruleVertexTraitArrayProperty.current; }
	EOF;

// Rule VertexTraitArrayProperty
ruleVertexTraitArrayProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='array'
		{
			newLeafNode(otherlv_0, grammarAccess.getVertexTraitArrayPropertyAccess().getArrayKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getVertexTraitArrayPropertyAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexTraitArrayPropertyAccess().getItemTypeVertexTraitPropertyTypeParserRuleCall_2_0());
				}
				lv_itemType_2_0=ruleVertexTraitPropertyType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexTraitArrayPropertyRule());
					}
					set(
						$current,
						"itemType",
						lv_itemType_2_0,
						"io.github.forsyde.io.Meta.VertexTraitPropertyType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getVertexTraitArrayPropertyAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleVertexTraitObjectProperty
entryRuleVertexTraitObjectProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitObjectPropertyRule()); }
	iv_ruleVertexTraitObjectProperty=ruleVertexTraitObjectProperty
	{ $current=$iv_ruleVertexTraitObjectProperty.current; }
	EOF;

// Rule VertexTraitObjectProperty
ruleVertexTraitObjectProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='object'
		{
			newLeafNode(otherlv_0, grammarAccess.getVertexTraitObjectPropertyAccess().getObjectKeyword_0());
		}
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getVertexTraitObjectPropertyAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexTraitObjectPropertyAccess().getKeyTypeVertexTraitPropertyTypeParserRuleCall_2_0());
				}
				lv_keyType_2_0=ruleVertexTraitPropertyType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexTraitObjectPropertyRule());
					}
					set(
						$current,
						"keyType",
						lv_keyType_2_0,
						"io.github.forsyde.io.Meta.VertexTraitPropertyType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getVertexTraitObjectPropertyAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexTraitObjectPropertyAccess().getValueTypeVertexTraitPropertyTypeParserRuleCall_4_0());
				}
				lv_valueType_4_0=ruleVertexTraitPropertyType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexTraitObjectPropertyRule());
					}
					set(
						$current,
						"valueType",
						lv_valueType_4_0,
						"io.github.forsyde.io.Meta.VertexTraitPropertyType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='>'
		{
			newLeafNode(otherlv_5, grammarAccess.getVertexTraitObjectPropertyAccess().getGreaterThanSignKeyword_5());
		}
	)
;

// Entry rule entryRuleVertexTraitPort
entryRuleVertexTraitPort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexTraitPortRule()); }
	iv_ruleVertexTraitPort=ruleVertexTraitPort
	{ $current=$iv_ruleVertexTraitPort.current; }
	EOF;

// Rule VertexTraitPort
ruleVertexTraitPort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								lv_multiple_1_0='multiple'
								{
									newLeafNode(lv_multiple_1_0, grammarAccess.getVertexTraitPortAccess().getMultipleMultipleKeyword_0_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getVertexTraitPortRule());
									}
									setWithLastConsumed($current, "multiple", lv_multiple_1_0 != null, "multiple");
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								lv_ordered_2_0='ordered'
								{
									newLeafNode(lv_ordered_2_0, grammarAccess.getVertexTraitPortAccess().getOrderedOrderedKeyword_1_0());
								}
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getVertexTraitPortRule());
									}
									setWithLastConsumed($current, "ordered", lv_ordered_2_0 != null, "ordered");
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								(
									{
										newCompositeNode(grammarAccess.getVertexTraitPortAccess().getDirectionVertexTraitPortDirectionEnumRuleCall_2_0_0());
									}
									lv_direction_3_0=ruleVertexTraitPortDirection
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getVertexTraitPortRule());
										}
										set(
											$current,
											"direction",
											lv_direction_3_0,
											"io.github.forsyde.io.Meta.VertexTraitPortDirection");
										afterParserOrEnumRuleCall();
									}
								)
							)?
							otherlv_4='port'
							{
								newLeafNode(otherlv_4, grammarAccess.getVertexTraitPortAccess().getPortKeyword_2_1());
							}
							(
								(
									lv_name_5_0=RULE_ID
									{
										newLeafNode(lv_name_5_0, grammarAccess.getVertexTraitPortAccess().getNameIDTerminalRuleCall_2_2_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getVertexTraitPortRule());
										}
										setWithLastConsumed(
											$current,
											"name",
											lv_name_5_0,
											"org.eclipse.xtext.common.Terminals.ID");
									}
								)
							)
							otherlv_6=':'
							{
								newLeafNode(otherlv_6, grammarAccess.getVertexTraitPortAccess().getColonKeyword_2_3());
							}
							(
								(
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getVertexTraitPortRule());
										}
									}
									otherlv_7=RULE_ID
									{
										newLeafNode(otherlv_7, grammarAccess.getVertexTraitPortAccess().getTraitVertexTraitCrossReference_2_4_0());
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleEdgeTrait
entryRuleEdgeTrait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEdgeTraitRule()); }
	iv_ruleEdgeTrait=ruleEdgeTrait
	{ $current=$iv_ruleEdgeTrait.current; }
	EOF;

// Rule EdgeTrait
ruleEdgeTrait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='edge'
		{
			newLeafNode(otherlv_0, grammarAccess.getEdgeTraitAccess().getEdgeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEdgeTraitAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeTraitRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='refines'
			{
				newLeafNode(otherlv_2, grammarAccess.getEdgeTraitAccess().getRefinesKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEdgeTraitRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitCrossReference_2_1_0());
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getEdgeTraitAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEdgeTraitRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getEdgeTraitAccess().getRefinesEdgeTraitCrossReference_2_2_1_0());
						}
					)
				)
			)*
		)?
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getEdgeTraitAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEdgeTraitAccess().getSpecsEdgeTraitConstraintParserRuleCall_4_0());
				}
				lv_specs_7_0=ruleEdgeTraitConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEdgeTraitRule());
					}
					add(
						$current,
						"specs",
						lv_specs_7_0,
						"io.github.forsyde.io.Meta.EdgeTraitConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getEdgeTraitAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEdgeTraitConstraint
entryRuleEdgeTraitConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEdgeTraitConstraintRule()); }
	iv_ruleEdgeTraitConstraint=ruleEdgeTraitConstraint
	{ $current=$iv_ruleEdgeTraitConstraint.current; }
	EOF;

// Rule EdgeTraitConstraint
ruleEdgeTraitConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraint'
		{
			newLeafNode(otherlv_0, grammarAccess.getEdgeTraitConstraintAccess().getConstraintKeyword_0());
		}
		(
			(
				(
					lv_target_1_0='target'
					{
						newLeafNode(lv_target_1_0, grammarAccess.getEdgeTraitConstraintAccess().getTargetTargetKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEdgeTraitConstraintRule());
						}
						setWithLastConsumed($current, "target", lv_target_1_0 != null, "target");
					}
				)
			)
			    |
			(
				(
					lv_source_2_0='source'
					{
						newLeafNode(lv_source_2_0, grammarAccess.getEdgeTraitConstraintAccess().getSourceSourceKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEdgeTraitConstraintRule());
						}
						setWithLastConsumed($current, "source", lv_source_2_0 != null, "source");
					}
				)
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEdgeTraitConstraintRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitCrossReference_2_0());
				}
			)
		)
		(
			otherlv_4='or'
			{
				newLeafNode(otherlv_4, grammarAccess.getEdgeTraitConstraintAccess().getOrKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEdgeTraitConstraintRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getEdgeTraitConstraintAccess().getFilterVertexTraitCrossReference_3_1_0());
					}
				)
			)
		)*
	)
;

// Rule VertexTraitPortDirection
ruleVertexTraitPortDirection returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='inout'
			{
				$current = grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='outin'
			{
				$current = grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVertexTraitPortDirectionAccess().getBIDIRECTIONALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='out'
			{
				$current = grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='outgoing'
			{
				$current = grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getVertexTraitPortDirectionAccess().getOUTGOINGEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='in'
			{
				$current = grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='incoming'
			{
				$current = grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getVertexTraitPortDirectionAccess().getINCOMINGEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
