#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Dec 10 09:37:18 2021 by generateDS.py version 2.40.6.
# Python 3.9.2 (default, Feb 28 2021, 17:03:44)  [GCC 10.2.1 20210110]
#
# Command line options:
#   ('-o', 'testPy.py')
#
# Command line arguments:
#   HierarchyXML.xsd
#
# Command line:
#   /home/rjordao/.local/bin/generateDS -o "testPy.py" HierarchyXML.xsd
#
# Current working directory (os.getcwd()):
#   model
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': None,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    setattr(settings[n], self[n])
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % float(input_data)).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class PortDirectionEnum(str, Enum):
    FORWARD='FORWARD'
    BACKWARD='BACKWARD'
    BIDIRECTIONAL='BIDIRECTIONAL'


class PortSpec(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, direction=None, connectedVertexTrait=None, connectedEdgeTrait=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.direction = _cast(None, direction)
        self.direction_nsprefix_ = None
        self.connectedVertexTrait = _cast(None, connectedVertexTrait)
        self.connectedVertexTrait_nsprefix_ = None
        self.connectedEdgeTrait = _cast(None, connectedEdgeTrait)
        self.connectedEdgeTrait_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PortSpec)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PortSpec.subclass:
            return PortSpec.subclass(*args_, **kwargs_)
        else:
            return PortSpec(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_direction(self):
        return self.direction
    def set_direction(self, direction):
        self.direction = direction
    def get_connectedVertexTrait(self):
        return self.connectedVertexTrait
    def set_connectedVertexTrait(self, connectedVertexTrait):
        self.connectedVertexTrait = connectedVertexTrait
    def get_connectedEdgeTrait(self):
        return self.connectedEdgeTrait
    def set_connectedEdgeTrait(self, connectedEdgeTrait):
        self.connectedEdgeTrait = connectedEdgeTrait
    def validate_PortDirectionEnum(self, value):
        # Validate type hierarchy:PortDirectionEnum, a restriction on xsd:NCName.
        if value is not None and Validate_simpletypes_ and self.gds_collector_ is not None:
            if not isinstance(value, str):
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s is not of the correct base simple type (str)' % {"value": value, "lineno": lineno, })
                return False
            value = value
            enumerations = ['FORWARD', 'BACKWARD', 'BIDIRECTIONAL']
            if value not in enumerations:
                lineno = self.gds_get_node_lineno_()
                self.gds_collector_.add_message('Value "%(value)s"%(lineno)s does not match xsd enumeration restriction on PortDirectionEnum' % {"value" : encode_str_2_3(value), "lineno": lineno} )
                result = False
    def _hasContent(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='PortSpec', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PortSpec')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PortSpec':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PortSpec')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PortSpec', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PortSpec'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.direction is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            outfile.write(' direction=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.direction), input_name='direction')), ))
        if self.connectedVertexTrait is not None and 'connectedVertexTrait' not in already_processed:
            already_processed.add('connectedVertexTrait')
            outfile.write(' connectedVertexTrait=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.connectedVertexTrait), input_name='connectedVertexTrait')), ))
        if self.connectedEdgeTrait is not None and 'connectedEdgeTrait' not in already_processed:
            already_processed.add('connectedEdgeTrait')
            outfile.write(' connectedEdgeTrait=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.connectedEdgeTrait), input_name='connectedEdgeTrait')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='PortSpec', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('direction', node)
        if value is not None and 'direction' not in already_processed:
            already_processed.add('direction')
            self.direction = value
            self.validate_PortDirectionEnum(self.direction)    # validate type PortDirectionEnum
        value = find_attr_value_('connectedVertexTrait', node)
        if value is not None and 'connectedVertexTrait' not in already_processed:
            already_processed.add('connectedVertexTrait')
            self.connectedVertexTrait = value
        value = find_attr_value_('connectedEdgeTrait', node)
        if value is not None and 'connectedEdgeTrait' not in already_processed:
            already_processed.add('connectedEdgeTrait')
            self.connectedEdgeTrait = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class PortSpec


class VertexPropertyType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VertexPropertyType.subclass:
            return VertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return VertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VertexPropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VertexPropertyType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexPropertyType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class VertexPropertyType


class StringVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("StringVertexPropertyType"), self).__init__( **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StringVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StringVertexPropertyType.subclass:
            return StringVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return StringVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(StringVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StringVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StringVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StringVertexPropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StringVertexPropertyType'):
        super(StringVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(StringVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(StringVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(StringVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class StringVertexPropertyType


class IntVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("IntVertexPropertyType"), self).__init__( **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntVertexPropertyType.subclass:
            return IntVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return IntVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(IntVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IntVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IntVertexPropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IntVertexPropertyType'):
        super(IntVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(IntVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(IntVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(IntVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class IntVertexPropertyType


class BooleanVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("BooleanVertexPropertyType"), self).__init__( **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BooleanVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BooleanVertexPropertyType.subclass:
            return BooleanVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return BooleanVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(BooleanVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='BooleanVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BooleanVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BooleanVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BooleanVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BooleanVertexPropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BooleanVertexPropertyType'):
        super(BooleanVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BooleanVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='BooleanVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(BooleanVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(BooleanVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(BooleanVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class BooleanVertexPropertyType


class FloatVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("FloatVertexPropertyType"), self).__init__( **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FloatVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FloatVertexPropertyType.subclass:
            return FloatVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return FloatVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(FloatVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='FloatVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FloatVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FloatVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FloatVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FloatVertexPropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FloatVertexPropertyType'):
        super(FloatVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FloatVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='FloatVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(FloatVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(FloatVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(FloatVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class FloatVertexPropertyType


class DoubleVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("DoubleVertexPropertyType"), self).__init__( **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DoubleVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DoubleVertexPropertyType.subclass:
            return DoubleVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return DoubleVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(DoubleVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='DoubleVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DoubleVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DoubleVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DoubleVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DoubleVertexPropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DoubleVertexPropertyType'):
        super(DoubleVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DoubleVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='DoubleVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(DoubleVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(DoubleVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(DoubleVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class DoubleVertexPropertyType


class LongVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("LongVertexPropertyType"), self).__init__( **kwargs_)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LongVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LongVertexPropertyType.subclass:
            return LongVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return LongVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def _hasContent(self):
        if (
            super(LongVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='LongVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LongVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LongVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LongVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LongVertexPropertyType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LongVertexPropertyType'):
        super(LongVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LongVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='LongVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(LongVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(LongVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(LongVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class LongVertexPropertyType


class ArrayVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, valueTypes=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("ArrayVertexPropertyType"), self).__init__( **kwargs_)
        self.valueTypes = valueTypes
        self.valueTypes_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayVertexPropertyType.subclass:
            return ArrayVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return ArrayVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_valueTypes(self):
        return self.valueTypes
    def set_valueTypes(self, valueTypes):
        self.valueTypes = valueTypes
    def set_valueTypes_with_type(self, value):
        self.valueTypes = value
        value.original_tagname_ = 'valueTypes'
        value.extensiontype_ = value.__class__.__name__
    def _hasContent(self):
        if (
            self.valueTypes is not None or
            super(ArrayVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='ArrayVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ArrayVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArrayVertexPropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArrayVertexPropertyType'):
        super(ArrayVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='ArrayVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(ArrayVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valueTypes is not None:
            self.valueTypes.export(outfile, level, namespaceprefix_, name_='valueTypes', namespacedef_='', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ArrayVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'valueTypes':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_, gds_collector_=gds_collector_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <valueTypes> element')
            self.valueTypes = obj_
            obj_.original_tagname_ = 'valueTypes'
        super(ArrayVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
# end class ArrayVertexPropertyType


class IntMapVertexPropertyType(VertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyType
    def __init__(self, valueType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("IntMapVertexPropertyType"), self).__init__( **kwargs_)
        self.valueType = valueType
        self.valueType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntMapVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntMapVertexPropertyType.subclass:
            return IntMapVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return IntMapVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_valueType(self):
        return self.valueType
    def set_valueType(self, valueType):
        self.valueType = valueType
    def set_valueType_with_type(self, value):
        self.valueType = value
        value.original_tagname_ = 'valueType'
        value.extensiontype_ = value.__class__.__name__
    def _hasContent(self):
        if (
            self.valueType is not None or
            super(IntMapVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntMapVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntMapVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IntMapVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntMapVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IntMapVertexPropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IntMapVertexPropertyType'):
        super(IntMapVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntMapVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntMapVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(IntMapVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valueType is not None:
            self.valueType.export(outfile, level, namespaceprefix_, name_='valueType', namespacedef_='', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(IntMapVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'valueType':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_, gds_collector_=gds_collector_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <valueType> element')
            self.valueType = obj_
            obj_.original_tagname_ = 'valueType'
        super(IntMapVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
# end class IntMapVertexPropertyType


class StringMapVertexPropertyType(IntVertexPropertyType):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = IntVertexPropertyType
    def __init__(self, valueType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("StringMapVertexPropertyType"), self).__init__( **kwargs_)
        self.valueType = valueType
        self.valueType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StringMapVertexPropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StringMapVertexPropertyType.subclass:
            return StringMapVertexPropertyType.subclass(*args_, **kwargs_)
        else:
            return StringMapVertexPropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_valueType(self):
        return self.valueType
    def set_valueType(self, valueType):
        self.valueType = valueType
    def _hasContent(self):
        if (
            self.valueType is not None or
            super(StringMapVertexPropertyType, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringMapVertexPropertyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StringMapVertexPropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StringMapVertexPropertyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringMapVertexPropertyType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StringMapVertexPropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StringMapVertexPropertyType'):
        super(StringMapVertexPropertyType, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringMapVertexPropertyType')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringMapVertexPropertyType', fromsubclass_=False, pretty_print=True):
        super(StringMapVertexPropertyType, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valueType is not None:
            namespaceprefix_ = self.valueType_nsprefix_ + ':' if (UseCapturedNS_ and self.valueType_nsprefix_) else ''
            self.valueType.export(outfile, level, namespaceprefix_, namespacedef_='', name_='valueType', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(StringMapVertexPropertyType, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'valueType':
            class_obj_ = self.get_class_obj_(child_, IntVertexPropertyType)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.valueType = obj_
            obj_.original_tagname_ = 'valueType'
        super(StringMapVertexPropertyType, self)._buildChildren(child_, node, nodeName_, True)
# end class StringMapVertexPropertyType


class VertexPropertyDefault(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VertexPropertyDefault.subclass:
            return VertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return VertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VertexPropertyDefault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VertexPropertyDefault'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class VertexPropertyDefault


class StringVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, string=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("StringVertexPropertyDefault"), self).__init__( **kwargs_)
        self.string = _cast(None, string)
        self.string_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StringVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StringVertexPropertyDefault.subclass:
            return StringVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return StringVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_string(self):
        return self.string
    def set_string(self, string):
        self.string = string
    def _hasContent(self):
        if (
            super(StringVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StringVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StringVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StringVertexPropertyDefault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StringVertexPropertyDefault'):
        super(StringVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringVertexPropertyDefault')
        if self.string is not None and 'string' not in already_processed:
            already_processed.add('string')
            outfile.write(' string=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.string), input_name='string')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(StringVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('string', node)
        if value is not None and 'string' not in already_processed:
            already_processed.add('string')
            self.string = value
        super(StringVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(StringVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class StringVertexPropertyDefault


class IntVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, intValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("IntVertexPropertyDefault"), self).__init__( **kwargs_)
        self.intValue = _cast(int, intValue)
        self.intValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntVertexPropertyDefault.subclass:
            return IntVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return IntVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_intValue(self):
        return self.intValue
    def set_intValue(self, intValue):
        self.intValue = intValue
    def _hasContent(self):
        if (
            super(IntVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IntVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IntVertexPropertyDefault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IntVertexPropertyDefault'):
        super(IntVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntVertexPropertyDefault')
        if self.intValue is not None and 'intValue' not in already_processed:
            already_processed.add('intValue')
            outfile.write(' intValue="%s"' % self.gds_format_integer(self.intValue, input_name='intValue'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(IntVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('intValue', node)
        if value is not None and 'intValue' not in already_processed:
            already_processed.add('intValue')
            self.intValue = self.gds_parse_integer(value, node, 'intValue')
        super(IntVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(IntVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class IntVertexPropertyDefault


class BooleanVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, booleanValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("BooleanVertexPropertyDefault"), self).__init__( **kwargs_)
        self.booleanValue = _cast(bool, booleanValue)
        self.booleanValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BooleanVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BooleanVertexPropertyDefault.subclass:
            return BooleanVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return BooleanVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_booleanValue(self):
        return self.booleanValue
    def set_booleanValue(self, booleanValue):
        self.booleanValue = booleanValue
    def _hasContent(self):
        if (
            super(BooleanVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='BooleanVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BooleanVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BooleanVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BooleanVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BooleanVertexPropertyDefault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='BooleanVertexPropertyDefault'):
        super(BooleanVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BooleanVertexPropertyDefault')
        if self.booleanValue is not None and 'booleanValue' not in already_processed:
            already_processed.add('booleanValue')
            outfile.write(' booleanValue="%s"' % self.gds_format_boolean(self.booleanValue, input_name='booleanValue'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='BooleanVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(BooleanVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('booleanValue', node)
        if value is not None and 'booleanValue' not in already_processed:
            already_processed.add('booleanValue')
            if value in ('true', '1'):
                self.booleanValue = True
            elif value in ('false', '0'):
                self.booleanValue = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        super(BooleanVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(BooleanVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class BooleanVertexPropertyDefault


class FloatVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, floatValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("FloatVertexPropertyDefault"), self).__init__( **kwargs_)
        self.floatValue = _cast(float, floatValue)
        self.floatValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FloatVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FloatVertexPropertyDefault.subclass:
            return FloatVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return FloatVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_floatValue(self):
        return self.floatValue
    def set_floatValue(self, floatValue):
        self.floatValue = floatValue
    def _hasContent(self):
        if (
            super(FloatVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='FloatVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FloatVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FloatVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FloatVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FloatVertexPropertyDefault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='FloatVertexPropertyDefault'):
        super(FloatVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FloatVertexPropertyDefault')
        if self.floatValue is not None and 'floatValue' not in already_processed:
            already_processed.add('floatValue')
            outfile.write(' floatValue="%s"' % self.gds_format_float(self.floatValue, input_name='floatValue'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='FloatVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(FloatVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('floatValue', node)
        if value is not None and 'floatValue' not in already_processed:
            already_processed.add('floatValue')
            value = self.gds_parse_float(value, node, 'floatValue')
            self.floatValue = value
        super(FloatVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(FloatVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class FloatVertexPropertyDefault


class DoubleVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, doubleValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("DoubleVertexPropertyDefault"), self).__init__( **kwargs_)
        self.doubleValue = _cast(float, doubleValue)
        self.doubleValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DoubleVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DoubleVertexPropertyDefault.subclass:
            return DoubleVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return DoubleVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_doubleValue(self):
        return self.doubleValue
    def set_doubleValue(self, doubleValue):
        self.doubleValue = doubleValue
    def _hasContent(self):
        if (
            super(DoubleVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='DoubleVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DoubleVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DoubleVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DoubleVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DoubleVertexPropertyDefault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DoubleVertexPropertyDefault'):
        super(DoubleVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DoubleVertexPropertyDefault')
        if self.doubleValue is not None and 'doubleValue' not in already_processed:
            already_processed.add('doubleValue')
            outfile.write(' doubleValue="%s"' % self.gds_format_double(self.doubleValue, input_name='doubleValue'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='DoubleVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(DoubleVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('doubleValue', node)
        if value is not None and 'doubleValue' not in already_processed:
            already_processed.add('doubleValue')
            value = self.gds_parse_double(value, node, 'doubleValue')
            self.doubleValue = value
        super(DoubleVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(DoubleVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class DoubleVertexPropertyDefault


class LongVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, longValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("LongVertexPropertyDefault"), self).__init__( **kwargs_)
        self.longValue = _cast(int, longValue)
        self.longValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LongVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LongVertexPropertyDefault.subclass:
            return LongVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return LongVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_longValue(self):
        return self.longValue
    def set_longValue(self, longValue):
        self.longValue = longValue
    def _hasContent(self):
        if (
            super(LongVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='LongVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('LongVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'LongVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LongVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='LongVertexPropertyDefault', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='LongVertexPropertyDefault'):
        super(LongVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='LongVertexPropertyDefault')
        if self.longValue is not None and 'longValue' not in already_processed:
            already_processed.add('longValue')
            outfile.write(' longValue="%s"' % self.gds_format_integer(self.longValue, input_name='longValue'))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='LongVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(LongVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('longValue', node)
        if value is not None and 'longValue' not in already_processed:
            already_processed.add('longValue')
            self.longValue = self.gds_parse_integer(value, node, 'longValue')
        super(LongVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        super(LongVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
        pass
# end class LongVertexPropertyDefault


class ArrayVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, values=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("ArrayVertexPropertyDefault"), self).__init__( **kwargs_)
        if values is None:
            self.values = []
        else:
            self.values = values
        self.values_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArrayVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArrayVertexPropertyDefault.subclass:
            return ArrayVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return ArrayVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_values(self):
        return self.values
    def set_values(self, values):
        self.values = values
    def set_values_with_type(self, value):
        self.values = value
        value.original_tagname_ = 'values'
        value.extensiontype_ = value.__class__.__name__
    def add_values(self, value):
        self.values.append(value)
    def add_values_with_type(self, value):
        self.values.append(value)
        value.original_tagname_ = 'values'
        value.extensiontype_ = value.__class__.__name__
    def insert_values_at(self, index, value):
        self.values.insert(index, value)
    def replace_values_at(self, index, value):
        self.values[index] = value
    def _hasContent(self):
        if (
            self.values or
            super(ArrayVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='ArrayVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArrayVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ArrayVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArrayVertexPropertyDefault', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArrayVertexPropertyDefault'):
        super(ArrayVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArrayVertexPropertyDefault')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='ArrayVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(ArrayVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for values_ in self.values:
            values_.export(outfile, level, namespaceprefix_, name_='values', namespacedef_='', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(ArrayVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'values':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_, gds_collector_=gds_collector_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <values> element')
            self.values.append(obj_)
            obj_.original_tagname_ = 'values'
        super(ArrayVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
# end class ArrayVertexPropertyDefault


class IntMapVertexPropertyDefault(VertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = VertexPropertyDefault
    def __init__(self, indexes=None, values=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("IntMapVertexPropertyDefault"), self).__init__( **kwargs_)
        if indexes is None:
            self.indexes = []
        else:
            self.indexes = indexes
        self.indexes_nsprefix_ = None
        if values is None:
            self.values = []
        else:
            self.values = values
        self.values_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, IntMapVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if IntMapVertexPropertyDefault.subclass:
            return IntMapVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return IntMapVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_indexes(self):
        return self.indexes
    def set_indexes(self, indexes):
        self.indexes = indexes
    def add_indexes(self, value):
        self.indexes.append(value)
    def insert_indexes_at(self, index, value):
        self.indexes.insert(index, value)
    def replace_indexes_at(self, index, value):
        self.indexes[index] = value
    def get_values(self):
        return self.values
    def set_values(self, values):
        self.values = values
    def set_values_with_type(self, value):
        self.values = value
        value.original_tagname_ = 'values'
        value.extensiontype_ = value.__class__.__name__
    def add_values(self, value):
        self.values.append(value)
    def add_values_with_type(self, value):
        self.values.append(value)
        value.original_tagname_ = 'values'
        value.extensiontype_ = value.__class__.__name__
    def insert_values_at(self, index, value):
        self.values.insert(index, value)
    def replace_values_at(self, index, value):
        self.values[index] = value
    def _hasContent(self):
        if (
            self.indexes or
            self.values or
            super(IntMapVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntMapVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('IntMapVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'IntMapVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntMapVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='IntMapVertexPropertyDefault', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='IntMapVertexPropertyDefault'):
        super(IntMapVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='IntMapVertexPropertyDefault')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='IntMapVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(IntMapVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for indexes_ in self.indexes:
            namespaceprefix_ = self.indexes_nsprefix_ + ':' if (UseCapturedNS_ and self.indexes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindexes>%s</%sindexes>%s' % (namespaceprefix_ , self.gds_format_integer(indexes_, input_name='indexes'), namespaceprefix_ , eol_))
        for values_ in self.values:
            values_.export(outfile, level, namespaceprefix_, name_='values', namespacedef_='', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(IntMapVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'indexes' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'indexes')
            ival_ = self.gds_validate_integer(ival_, node, 'indexes')
            self.indexes.append(ival_)
            self.indexes_nsprefix_ = child_.prefix
        elif nodeName_ == 'values':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_, gds_collector_=gds_collector_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <values> element')
            self.values.append(obj_)
            obj_.original_tagname_ = 'values'
        super(IntMapVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
# end class IntMapVertexPropertyDefault


class StringMapVertexPropertyDefault(IntVertexPropertyDefault):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = IntVertexPropertyDefault
    def __init__(self, indexes=None, values=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("StringMapVertexPropertyDefault"), self).__init__( **kwargs_)
        if indexes is None:
            self.indexes = []
        else:
            self.indexes = indexes
        self.indexes_nsprefix_ = None
        if values is None:
            self.values = []
        else:
            self.values = values
        self.values_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StringMapVertexPropertyDefault)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StringMapVertexPropertyDefault.subclass:
            return StringMapVertexPropertyDefault.subclass(*args_, **kwargs_)
        else:
            return StringMapVertexPropertyDefault(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_indexes(self):
        return self.indexes
    def set_indexes(self, indexes):
        self.indexes = indexes
    def add_indexes(self, value):
        self.indexes.append(value)
    def insert_indexes_at(self, index, value):
        self.indexes.insert(index, value)
    def replace_indexes_at(self, index, value):
        self.indexes[index] = value
    def get_values(self):
        return self.values
    def set_values(self, values):
        self.values = values
    def add_values(self, value):
        self.values.append(value)
    def insert_values_at(self, index, value):
        self.values.insert(index, value)
    def replace_values_at(self, index, value):
        self.values[index] = value
    def _hasContent(self):
        if (
            self.indexes or
            self.values or
            super(StringMapVertexPropertyDefault, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringMapVertexPropertyDefault', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StringMapVertexPropertyDefault')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StringMapVertexPropertyDefault':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringMapVertexPropertyDefault')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StringMapVertexPropertyDefault', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StringMapVertexPropertyDefault'):
        super(StringMapVertexPropertyDefault, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StringMapVertexPropertyDefault')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='StringMapVertexPropertyDefault', fromsubclass_=False, pretty_print=True):
        super(StringMapVertexPropertyDefault, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for indexes_ in self.indexes:
            namespaceprefix_ = self.indexes_nsprefix_ + ':' if (UseCapturedNS_ and self.indexes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindexes>%s</%sindexes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(indexes_), input_name='indexes')), namespaceprefix_ , eol_))
        for values_ in self.values:
            namespaceprefix_ = self.values_nsprefix_ + ':' if (UseCapturedNS_ and self.values_nsprefix_) else ''
            values_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='values', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(StringMapVertexPropertyDefault, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'indexes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'indexes')
            value_ = self.gds_validate_string(value_, node, 'indexes')
            self.indexes.append(value_)
            self.indexes_nsprefix_ = child_.prefix
        elif nodeName_ == 'values':
            class_obj_ = self.get_class_obj_(child_, IntVertexPropertyDefault)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.values.append(obj_)
            obj_.original_tagname_ = 'values'
        super(StringMapVertexPropertyDefault, self)._buildChildren(child_, node, nodeName_, True)
# end class StringMapVertexPropertyDefault


class VertexPropertySpec(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, propertyType=None, propertyDefault=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.propertyType = propertyType
        self.propertyType_nsprefix_ = None
        self.propertyDefault = propertyDefault
        self.propertyDefault_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VertexPropertySpec)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VertexPropertySpec.subclass:
            return VertexPropertySpec.subclass(*args_, **kwargs_)
        else:
            return VertexPropertySpec(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_propertyType(self):
        return self.propertyType
    def set_propertyType(self, propertyType):
        self.propertyType = propertyType
    def set_propertyType_with_type(self, value):
        self.propertyType = value
        value.original_tagname_ = 'propertyType'
        value.extensiontype_ = value.__class__.__name__
    def get_propertyDefault(self):
        return self.propertyDefault
    def set_propertyDefault(self, propertyDefault):
        self.propertyDefault = propertyDefault
    def set_propertyDefault_with_type(self, value):
        self.propertyDefault = value
        value.original_tagname_ = 'propertyDefault'
        value.extensiontype_ = value.__class__.__name__
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def _hasContent(self):
        if (
            self.propertyType is not None or
            self.propertyDefault is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexPropertySpec', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VertexPropertySpec')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VertexPropertySpec':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VertexPropertySpec')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VertexPropertySpec', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VertexPropertySpec'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexPropertySpec', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.propertyType is not None:
            self.propertyType.export(outfile, level, namespaceprefix_, name_='propertyType', namespacedef_='', pretty_print=pretty_print)
        if self.propertyDefault is not None:
            self.propertyDefault.export(outfile, level, namespaceprefix_, name_='propertyDefault', namespacedef_='', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'propertyType':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_, gds_collector_=gds_collector_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <propertyType> element')
            self.propertyType = obj_
            obj_.original_tagname_ = 'propertyType'
        elif nodeName_ == 'propertyDefault':
            type_name_ = child_.attrib.get(
                '{http://www.w3.org/2001/XMLSchema-instance}type')
            if type_name_ is None:
                type_name_ = child_.attrib.get('type')
            if type_name_ is not None:
                type_names_ = type_name_.split(':')
                if len(type_names_) == 1:
                    type_name_ = type_names_[0]
                else:
                    type_name_ = type_names_[1]
                class_ = globals()[type_name_]
                obj_ = class_.factory()
                obj_.build(child_, gds_collector_=gds_collector_)
            else:
                raise NotImplementedError(
                    'Class not implemented for <propertyDefault> element')
            self.propertyDefault = obj_
            obj_.original_tagname_ = 'propertyDefault'
# end class VertexPropertySpec


class VertexTraitSpec(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, refinedTraits=None, requiredPorts=None, requiredProperties=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.refinedTraits = _cast(None, refinedTraits)
        self.refinedTraits_nsprefix_ = None
        if requiredPorts is None:
            self.requiredPorts = []
        else:
            self.requiredPorts = requiredPorts
        self.requiredPorts_nsprefix_ = None
        if requiredProperties is None:
            self.requiredProperties = []
        else:
            self.requiredProperties = requiredProperties
        self.requiredProperties_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VertexTraitSpec)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VertexTraitSpec.subclass:
            return VertexTraitSpec.subclass(*args_, **kwargs_)
        else:
            return VertexTraitSpec(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_requiredPorts(self):
        return self.requiredPorts
    def set_requiredPorts(self, requiredPorts):
        self.requiredPorts = requiredPorts
    def add_requiredPorts(self, value):
        self.requiredPorts.append(value)
    def insert_requiredPorts_at(self, index, value):
        self.requiredPorts.insert(index, value)
    def replace_requiredPorts_at(self, index, value):
        self.requiredPorts[index] = value
    def get_requiredProperties(self):
        return self.requiredProperties
    def set_requiredProperties(self, requiredProperties):
        self.requiredProperties = requiredProperties
    def add_requiredProperties(self, value):
        self.requiredProperties.append(value)
    def insert_requiredProperties_at(self, index, value):
        self.requiredProperties.insert(index, value)
    def replace_requiredProperties_at(self, index, value):
        self.requiredProperties[index] = value
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_refinedTraits(self):
        return self.refinedTraits
    def set_refinedTraits(self, refinedTraits):
        self.refinedTraits = refinedTraits
    def _hasContent(self):
        if (
            self.requiredPorts or
            self.requiredProperties
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexTraitSpec', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VertexTraitSpec')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'VertexTraitSpec':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='VertexTraitSpec')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='VertexTraitSpec', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='VertexTraitSpec'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.refinedTraits is not None and 'refinedTraits' not in already_processed:
            already_processed.add('refinedTraits')
            outfile.write(' refinedTraits=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refinedTraits), input_name='refinedTraits')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='VertexTraitSpec', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for requiredPorts_ in self.requiredPorts:
            namespaceprefix_ = self.requiredPorts_nsprefix_ + ':' if (UseCapturedNS_ and self.requiredPorts_nsprefix_) else ''
            requiredPorts_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='requiredPorts', pretty_print=pretty_print)
        for requiredProperties_ in self.requiredProperties:
            namespaceprefix_ = self.requiredProperties_nsprefix_ + ':' if (UseCapturedNS_ and self.requiredProperties_nsprefix_) else ''
            requiredProperties_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='requiredProperties', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('refinedTraits', node)
        if value is not None and 'refinedTraits' not in already_processed:
            already_processed.add('refinedTraits')
            self.refinedTraits = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'requiredPorts':
            obj_ = PortSpec.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.requiredPorts.append(obj_)
            obj_.original_tagname_ = 'requiredPorts'
        elif nodeName_ == 'requiredProperties':
            obj_ = VertexPropertySpec.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.requiredProperties.append(obj_)
            obj_.original_tagname_ = 'requiredProperties'
# end class VertexTraitSpec


class EdgeTraitSpec(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, name=None, refinedTraits=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.refinedTraits = _cast(None, refinedTraits)
        self.refinedTraits_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EdgeTraitSpec)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EdgeTraitSpec.subclass:
            return EdgeTraitSpec.subclass(*args_, **kwargs_)
        else:
            return EdgeTraitSpec(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_refinedTraits(self):
        return self.refinedTraits
    def set_refinedTraits(self, refinedTraits):
        self.refinedTraits = refinedTraits
    def _hasContent(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='EdgeTraitSpec', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EdgeTraitSpec')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'EdgeTraitSpec':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EdgeTraitSpec')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EdgeTraitSpec', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EdgeTraitSpec'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.refinedTraits is not None and 'refinedTraits' not in already_processed:
            already_processed.add('refinedTraits')
            outfile.write(' refinedTraits=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.refinedTraits), input_name='refinedTraits')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='EdgeTraitSpec', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('refinedTraits', node)
        if value is not None and 'refinedTraits' not in already_processed:
            already_processed.add('refinedTraits')
            self.refinedTraits = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        pass
# end class EdgeTraitSpec


class TraitHierarchy(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, namespace='', scopedHierarchy=None, vertexTraits=None, edgeTraits=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.namespace = _cast(None, namespace)
        self.namespace_nsprefix_ = None
        if scopedHierarchy is None:
            self.scopedHierarchy = []
        else:
            self.scopedHierarchy = scopedHierarchy
        self.scopedHierarchy_nsprefix_ = None
        if vertexTraits is None:
            self.vertexTraits = []
        else:
            self.vertexTraits = vertexTraits
        self.vertexTraits_nsprefix_ = None
        if edgeTraits is None:
            self.edgeTraits = []
        else:
            self.edgeTraits = edgeTraits
        self.edgeTraits_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TraitHierarchy)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TraitHierarchy.subclass:
            return TraitHierarchy.subclass(*args_, **kwargs_)
        else:
            return TraitHierarchy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_scopedHierarchy(self):
        return self.scopedHierarchy
    def set_scopedHierarchy(self, scopedHierarchy):
        self.scopedHierarchy = scopedHierarchy
    def add_scopedHierarchy(self, value):
        self.scopedHierarchy.append(value)
    def insert_scopedHierarchy_at(self, index, value):
        self.scopedHierarchy.insert(index, value)
    def replace_scopedHierarchy_at(self, index, value):
        self.scopedHierarchy[index] = value
    def get_vertexTraits(self):
        return self.vertexTraits
    def set_vertexTraits(self, vertexTraits):
        self.vertexTraits = vertexTraits
    def add_vertexTraits(self, value):
        self.vertexTraits.append(value)
    def insert_vertexTraits_at(self, index, value):
        self.vertexTraits.insert(index, value)
    def replace_vertexTraits_at(self, index, value):
        self.vertexTraits[index] = value
    def get_edgeTraits(self):
        return self.edgeTraits
    def set_edgeTraits(self, edgeTraits):
        self.edgeTraits = edgeTraits
    def add_edgeTraits(self, value):
        self.edgeTraits.append(value)
    def insert_edgeTraits_at(self, index, value):
        self.edgeTraits.insert(index, value)
    def replace_edgeTraits_at(self, index, value):
        self.edgeTraits[index] = value
    def get_namespace(self):
        return self.namespace
    def set_namespace(self, namespace):
        self.namespace = namespace
    def _hasContent(self):
        if (
            self.scopedHierarchy or
            self.vertexTraits or
            self.edgeTraits
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='TraitHierarchy', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TraitHierarchy')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TraitHierarchy':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TraitHierarchy')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TraitHierarchy', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TraitHierarchy'):
        if self.namespace != "" and 'namespace' not in already_processed:
            already_processed.add('namespace')
            outfile.write(' namespace=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.namespace), input_name='namespace')), ))
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"', name_='TraitHierarchy', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for scopedHierarchy_ in self.scopedHierarchy:
            namespaceprefix_ = self.scopedHierarchy_nsprefix_ + ':' if (UseCapturedNS_ and self.scopedHierarchy_nsprefix_) else ''
            scopedHierarchy_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scopedHierarchy', pretty_print=pretty_print)
        for vertexTraits_ in self.vertexTraits:
            namespaceprefix_ = self.vertexTraits_nsprefix_ + ':' if (UseCapturedNS_ and self.vertexTraits_nsprefix_) else ''
            vertexTraits_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='vertexTraits', pretty_print=pretty_print)
        for edgeTraits_ in self.edgeTraits:
            namespaceprefix_ = self.edgeTraits_nsprefix_ + ':' if (UseCapturedNS_ and self.edgeTraits_nsprefix_) else ''
            edgeTraits_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='edgeTraits', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('namespace', node)
        if value is not None and 'namespace' not in already_processed:
            already_processed.add('namespace')
            self.namespace = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'scopedHierarchy':
            obj_ = TraitHierarchy.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scopedHierarchy.append(obj_)
            obj_.original_tagname_ = 'scopedHierarchy'
        elif nodeName_ == 'vertexTraits':
            obj_ = VertexTraitSpec.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.vertexTraits.append(obj_)
            obj_.original_tagname_ = 'vertexTraits'
        elif nodeName_ == 'edgeTraits':
            obj_ = EdgeTraitSpec.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.edgeTraits.append(obj_)
            obj_.original_tagname_ = 'edgeTraits'
# end class TraitHierarchy


GDSClassesMapping = {
    'ArrayVertexPropertyDefault': ArrayVertexPropertyDefault,
    'ArrayVertexPropertyType': ArrayVertexPropertyType,
    'BooleanVertexPropertyDefault': BooleanVertexPropertyDefault,
    'BooleanVertexPropertyType': BooleanVertexPropertyType,
    'DoubleVertexPropertyDefault': DoubleVertexPropertyDefault,
    'DoubleVertexPropertyType': DoubleVertexPropertyType,
    'EdgeTraitSpec': EdgeTraitSpec,
    'FloatVertexPropertyDefault': FloatVertexPropertyDefault,
    'FloatVertexPropertyType': FloatVertexPropertyType,
    'IntMapVertexPropertyDefault': IntMapVertexPropertyDefault,
    'IntMapVertexPropertyType': IntMapVertexPropertyType,
    'IntVertexPropertyDefault': IntVertexPropertyDefault,
    'IntVertexPropertyType': IntVertexPropertyType,
    'LongVertexPropertyDefault': LongVertexPropertyDefault,
    'LongVertexPropertyType': LongVertexPropertyType,
    'PortSpec': PortSpec,
    'StringMapVertexPropertyDefault': StringMapVertexPropertyDefault,
    'StringMapVertexPropertyType': StringMapVertexPropertyType,
    'StringVertexPropertyDefault': StringVertexPropertyDefault,
    'StringVertexPropertyType': StringVertexPropertyType,
    'TraitHierarchy': TraitHierarchy,
    'VertexPropertySpec': VertexPropertySpec,
    'VertexTraitSpec': VertexTraitSpec,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PortSpec'
        rootClass = PortSpec
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PortSpec'
        rootClass = PortSpec
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PortSpec'
        rootClass = PortSpec
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:hierarchy="forsyde.io.trait.hierarchy"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'PortSpec'
        rootClass = PortSpec
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from testPy import *\n\n')
        sys.stdout.write('import testPy as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'forsyde.io.trait.hierarchy': [('PortDirectionEnum', 'HierarchyXML.xsd', 'ST'),
                                ('PortSpec', 'HierarchyXML.xsd', 'CT'),
                                ('VertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('StringVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('IntVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('BooleanVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('FloatVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('DoubleVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('LongVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('ArrayVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('IntMapVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('StringMapVertexPropertyType',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('VertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('StringVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('IntVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('BooleanVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('FloatVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('DoubleVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('LongVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('ArrayVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('IntMapVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('StringMapVertexPropertyDefault',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('VertexPropertySpec',
                                 'HierarchyXML.xsd',
                                 'CT'),
                                ('VertexTraitSpec', 'HierarchyXML.xsd', 'CT'),
                                ('EdgeTraitSpec', 'HierarchyXML.xsd', 'CT'),
                                ('TraitHierarchy', 'HierarchyXML.xsd', 'CT')]}

__all__ = [
    "ArrayVertexPropertyDefault",
    "ArrayVertexPropertyType",
    "BooleanVertexPropertyDefault",
    "BooleanVertexPropertyType",
    "DoubleVertexPropertyDefault",
    "DoubleVertexPropertyType",
    "EdgeTraitSpec",
    "FloatVertexPropertyDefault",
    "FloatVertexPropertyType",
    "IntMapVertexPropertyDefault",
    "IntMapVertexPropertyType",
    "IntVertexPropertyDefault",
    "IntVertexPropertyType",
    "LongVertexPropertyDefault",
    "LongVertexPropertyType",
    "PortSpec",
    "StringMapVertexPropertyDefault",
    "StringMapVertexPropertyType",
    "StringVertexPropertyDefault",
    "StringVertexPropertyType",
    "TraitHierarchy",
    "VertexPropertyDefault",
    "VertexPropertySpec",
    "VertexPropertyType",
    "VertexTraitSpec"
]
