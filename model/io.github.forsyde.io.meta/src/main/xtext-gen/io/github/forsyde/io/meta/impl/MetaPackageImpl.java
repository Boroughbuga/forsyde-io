/**
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.meta.impl;

import io.github.forsyde.io.meta.EdgeTrait;
import io.github.forsyde.io.meta.EdgeTraitConstraint;
import io.github.forsyde.io.meta.MetaFactory;
import io.github.forsyde.io.meta.MetaPackage;
import io.github.forsyde.io.meta.Model;
import io.github.forsyde.io.meta.VertexTrait;
import io.github.forsyde.io.meta.VertexTraitArrayProperty;
import io.github.forsyde.io.meta.VertexTraitBoolProperty;
import io.github.forsyde.io.meta.VertexTraitIntProperty;
import io.github.forsyde.io.meta.VertexTraitObjectProperty;
import io.github.forsyde.io.meta.VertexTraitPort;
import io.github.forsyde.io.meta.VertexTraitPortDirection;
import io.github.forsyde.io.meta.VertexTraitProperty;
import io.github.forsyde.io.meta.VertexTraitPropertyType;
import io.github.forsyde.io.meta.VertexTraitRealProperty;
import io.github.forsyde.io.meta.VertexTraitStringProperty;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MetaPackageImpl extends EPackageImpl implements MetaPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitPropertyTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitIntPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitRealPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitBoolPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitStringPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitArrayPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitObjectPropertyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass vertexTraitPortEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass edgeTraitEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass edgeTraitConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum vertexTraitPortDirectionEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see io.github.forsyde.io.meta.MetaPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MetaPackageImpl()
  {
    super(eNS_URI, MetaFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MetaPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MetaPackage init()
  {
    if (isInited) return (MetaPackage)EPackage.Registry.INSTANCE.getEPackage(MetaPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMetaPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MetaPackageImpl theMetaPackage = registeredMetaPackage instanceof MetaPackageImpl ? (MetaPackageImpl)registeredMetaPackage : new MetaPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMetaPackage.createPackageContents();

    // Initialize created meta-data
    theMetaPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMetaPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MetaPackage.eNS_URI, theMetaPackage);
    return theMetaPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModel()
  {
    return modelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getModel_Traits()
  {
    return (EReference)modelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTrait()
  {
    return vertexTraitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTrait_Name()
  {
    return (EAttribute)vertexTraitEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTrait_Refines()
  {
    return (EReference)vertexTraitEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTrait_Ports()
  {
    return (EReference)vertexTraitEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTrait_Properties()
  {
    return (EReference)vertexTraitEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitProperty()
  {
    return vertexTraitPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitProperty_Name()
  {
    return (EAttribute)vertexTraitPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTraitProperty_Type()
  {
    return (EReference)vertexTraitPropertyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitPropertyType()
  {
    return vertexTraitPropertyTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitIntProperty()
  {
    return vertexTraitIntPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitIntProperty_Default()
  {
    return (EAttribute)vertexTraitIntPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitRealProperty()
  {
    return vertexTraitRealPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitRealProperty_Double()
  {
    return (EAttribute)vertexTraitRealPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitRealProperty_Default()
  {
    return (EAttribute)vertexTraitRealPropertyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitBoolProperty()
  {
    return vertexTraitBoolPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitBoolProperty_Default()
  {
    return (EAttribute)vertexTraitBoolPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitStringProperty()
  {
    return vertexTraitStringPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitStringProperty_Default()
  {
    return (EAttribute)vertexTraitStringPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitArrayProperty()
  {
    return vertexTraitArrayPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTraitArrayProperty_ItemType()
  {
    return (EReference)vertexTraitArrayPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitObjectProperty()
  {
    return vertexTraitObjectPropertyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTraitObjectProperty_KeyType()
  {
    return (EReference)vertexTraitObjectPropertyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTraitObjectProperty_ValueType()
  {
    return (EReference)vertexTraitObjectPropertyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVertexTraitPort()
  {
    return vertexTraitPortEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitPort_Multiple()
  {
    return (EAttribute)vertexTraitPortEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitPort_Ordered()
  {
    return (EAttribute)vertexTraitPortEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitPort_Direction()
  {
    return (EAttribute)vertexTraitPortEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVertexTraitPort_Name()
  {
    return (EAttribute)vertexTraitPortEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVertexTraitPort_Trait()
  {
    return (EReference)vertexTraitPortEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEdgeTrait()
  {
    return edgeTraitEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEdgeTrait_Name()
  {
    return (EAttribute)edgeTraitEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEdgeTrait_Refines()
  {
    return (EReference)edgeTraitEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEdgeTrait_Specs()
  {
    return (EReference)edgeTraitEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEdgeTraitConstraint()
  {
    return edgeTraitConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEdgeTraitConstraint_Target()
  {
    return (EAttribute)edgeTraitConstraintEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEdgeTraitConstraint_Source()
  {
    return (EAttribute)edgeTraitConstraintEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEdgeTraitConstraint_Filter()
  {
    return (EReference)edgeTraitConstraintEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getVertexTraitPortDirection()
  {
    return vertexTraitPortDirectionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaFactory getMetaFactory()
  {
    return (MetaFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    modelEClass = createEClass(MODEL);
    createEReference(modelEClass, MODEL__TRAITS);

    vertexTraitEClass = createEClass(VERTEX_TRAIT);
    createEAttribute(vertexTraitEClass, VERTEX_TRAIT__NAME);
    createEReference(vertexTraitEClass, VERTEX_TRAIT__REFINES);
    createEReference(vertexTraitEClass, VERTEX_TRAIT__PORTS);
    createEReference(vertexTraitEClass, VERTEX_TRAIT__PROPERTIES);

    vertexTraitPropertyEClass = createEClass(VERTEX_TRAIT_PROPERTY);
    createEAttribute(vertexTraitPropertyEClass, VERTEX_TRAIT_PROPERTY__NAME);
    createEReference(vertexTraitPropertyEClass, VERTEX_TRAIT_PROPERTY__TYPE);

    vertexTraitPropertyTypeEClass = createEClass(VERTEX_TRAIT_PROPERTY_TYPE);

    vertexTraitIntPropertyEClass = createEClass(VERTEX_TRAIT_INT_PROPERTY);
    createEAttribute(vertexTraitIntPropertyEClass, VERTEX_TRAIT_INT_PROPERTY__DEFAULT);

    vertexTraitRealPropertyEClass = createEClass(VERTEX_TRAIT_REAL_PROPERTY);
    createEAttribute(vertexTraitRealPropertyEClass, VERTEX_TRAIT_REAL_PROPERTY__DOUBLE);
    createEAttribute(vertexTraitRealPropertyEClass, VERTEX_TRAIT_REAL_PROPERTY__DEFAULT);

    vertexTraitBoolPropertyEClass = createEClass(VERTEX_TRAIT_BOOL_PROPERTY);
    createEAttribute(vertexTraitBoolPropertyEClass, VERTEX_TRAIT_BOOL_PROPERTY__DEFAULT);

    vertexTraitStringPropertyEClass = createEClass(VERTEX_TRAIT_STRING_PROPERTY);
    createEAttribute(vertexTraitStringPropertyEClass, VERTEX_TRAIT_STRING_PROPERTY__DEFAULT);

    vertexTraitArrayPropertyEClass = createEClass(VERTEX_TRAIT_ARRAY_PROPERTY);
    createEReference(vertexTraitArrayPropertyEClass, VERTEX_TRAIT_ARRAY_PROPERTY__ITEM_TYPE);

    vertexTraitObjectPropertyEClass = createEClass(VERTEX_TRAIT_OBJECT_PROPERTY);
    createEReference(vertexTraitObjectPropertyEClass, VERTEX_TRAIT_OBJECT_PROPERTY__KEY_TYPE);
    createEReference(vertexTraitObjectPropertyEClass, VERTEX_TRAIT_OBJECT_PROPERTY__VALUE_TYPE);

    vertexTraitPortEClass = createEClass(VERTEX_TRAIT_PORT);
    createEAttribute(vertexTraitPortEClass, VERTEX_TRAIT_PORT__MULTIPLE);
    createEAttribute(vertexTraitPortEClass, VERTEX_TRAIT_PORT__ORDERED);
    createEAttribute(vertexTraitPortEClass, VERTEX_TRAIT_PORT__DIRECTION);
    createEAttribute(vertexTraitPortEClass, VERTEX_TRAIT_PORT__NAME);
    createEReference(vertexTraitPortEClass, VERTEX_TRAIT_PORT__TRAIT);

    edgeTraitEClass = createEClass(EDGE_TRAIT);
    createEAttribute(edgeTraitEClass, EDGE_TRAIT__NAME);
    createEReference(edgeTraitEClass, EDGE_TRAIT__REFINES);
    createEReference(edgeTraitEClass, EDGE_TRAIT__SPECS);

    edgeTraitConstraintEClass = createEClass(EDGE_TRAIT_CONSTRAINT);
    createEAttribute(edgeTraitConstraintEClass, EDGE_TRAIT_CONSTRAINT__TARGET);
    createEAttribute(edgeTraitConstraintEClass, EDGE_TRAIT_CONSTRAINT__SOURCE);
    createEReference(edgeTraitConstraintEClass, EDGE_TRAIT_CONSTRAINT__FILTER);

    // Create enums
    vertexTraitPortDirectionEEnum = createEEnum(VERTEX_TRAIT_PORT_DIRECTION);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    vertexTraitIntPropertyEClass.getESuperTypes().add(this.getVertexTraitPropertyType());
    vertexTraitRealPropertyEClass.getESuperTypes().add(this.getVertexTraitPropertyType());
    vertexTraitBoolPropertyEClass.getESuperTypes().add(this.getVertexTraitPropertyType());
    vertexTraitStringPropertyEClass.getESuperTypes().add(this.getVertexTraitPropertyType());
    vertexTraitArrayPropertyEClass.getESuperTypes().add(this.getVertexTraitPropertyType());
    vertexTraitObjectPropertyEClass.getESuperTypes().add(this.getVertexTraitPropertyType());

    // Initialize classes and features; add operations and parameters
    initEClass(modelEClass, Model.class, "Model", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getModel_Traits(), ecorePackage.getEObject(), null, "traits", null, 0, -1, Model.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitEClass, VertexTrait.class, "VertexTrait", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVertexTrait_Name(), ecorePackage.getEString(), "name", null, 0, 1, VertexTrait.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVertexTrait_Refines(), this.getVertexTrait(), null, "refines", null, 0, -1, VertexTrait.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVertexTrait_Ports(), this.getVertexTraitPort(), null, "ports", null, 0, -1, VertexTrait.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVertexTrait_Properties(), this.getVertexTraitProperty(), null, "properties", null, 0, -1, VertexTrait.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitPropertyEClass, VertexTraitProperty.class, "VertexTraitProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVertexTraitProperty_Name(), ecorePackage.getEString(), "name", null, 0, 1, VertexTraitProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVertexTraitProperty_Type(), this.getVertexTraitPropertyType(), null, "type", null, 0, 1, VertexTraitProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitPropertyTypeEClass, VertexTraitPropertyType.class, "VertexTraitPropertyType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(vertexTraitIntPropertyEClass, VertexTraitIntProperty.class, "VertexTraitIntProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVertexTraitIntProperty_Default(), ecorePackage.getEInt(), "default", null, 0, 1, VertexTraitIntProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitRealPropertyEClass, VertexTraitRealProperty.class, "VertexTraitRealProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVertexTraitRealProperty_Double(), ecorePackage.getEBoolean(), "double", null, 0, 1, VertexTraitRealProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVertexTraitRealProperty_Default(), ecorePackage.getEString(), "default", null, 0, 1, VertexTraitRealProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitBoolPropertyEClass, VertexTraitBoolProperty.class, "VertexTraitBoolProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVertexTraitBoolProperty_Default(), ecorePackage.getEBoolean(), "default", null, 0, 1, VertexTraitBoolProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitStringPropertyEClass, VertexTraitStringProperty.class, "VertexTraitStringProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVertexTraitStringProperty_Default(), ecorePackage.getEString(), "default", null, 0, 1, VertexTraitStringProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitArrayPropertyEClass, VertexTraitArrayProperty.class, "VertexTraitArrayProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVertexTraitArrayProperty_ItemType(), this.getVertexTraitPropertyType(), null, "itemType", null, 0, 1, VertexTraitArrayProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitObjectPropertyEClass, VertexTraitObjectProperty.class, "VertexTraitObjectProperty", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVertexTraitObjectProperty_KeyType(), this.getVertexTraitPropertyType(), null, "keyType", null, 0, 1, VertexTraitObjectProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVertexTraitObjectProperty_ValueType(), this.getVertexTraitPropertyType(), null, "valueType", null, 0, 1, VertexTraitObjectProperty.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(vertexTraitPortEClass, VertexTraitPort.class, "VertexTraitPort", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVertexTraitPort_Multiple(), ecorePackage.getEBoolean(), "multiple", null, 0, 1, VertexTraitPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVertexTraitPort_Ordered(), ecorePackage.getEBoolean(), "ordered", null, 0, 1, VertexTraitPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVertexTraitPort_Direction(), this.getVertexTraitPortDirection(), "direction", null, 0, 1, VertexTraitPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVertexTraitPort_Name(), ecorePackage.getEString(), "name", null, 0, 1, VertexTraitPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVertexTraitPort_Trait(), this.getVertexTrait(), null, "trait", null, 0, 1, VertexTraitPort.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(edgeTraitEClass, EdgeTrait.class, "EdgeTrait", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEdgeTrait_Name(), ecorePackage.getEString(), "name", null, 0, 1, EdgeTrait.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEdgeTrait_Refines(), this.getEdgeTrait(), null, "refines", null, 0, -1, EdgeTrait.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEdgeTrait_Specs(), this.getEdgeTraitConstraint(), null, "specs", null, 0, -1, EdgeTrait.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(edgeTraitConstraintEClass, EdgeTraitConstraint.class, "EdgeTraitConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEdgeTraitConstraint_Target(), ecorePackage.getEBoolean(), "target", null, 0, 1, EdgeTraitConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEdgeTraitConstraint_Source(), ecorePackage.getEBoolean(), "source", null, 0, 1, EdgeTraitConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEdgeTraitConstraint_Filter(), this.getVertexTrait(), null, "filter", null, 0, -1, EdgeTraitConstraint.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(vertexTraitPortDirectionEEnum, VertexTraitPortDirection.class, "VertexTraitPortDirection");
    addEEnumLiteral(vertexTraitPortDirectionEEnum, VertexTraitPortDirection.BIDIRECTIONAL);
    addEEnumLiteral(vertexTraitPortDirectionEEnum, VertexTraitPortDirection.OUTGOING);
    addEEnumLiteral(vertexTraitPortDirectionEEnum, VertexTraitPortDirection.INCOMING);

    // Create resource
    createResource(eNS_URI);
  }

} //MetaPackageImpl
