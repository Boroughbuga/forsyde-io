[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]

[**
 * The documentation of the template generateElement.
 * @param aSystem
 */]
[query public needsMap(aClass : EClass) : Boolean =
  aClass.eAllAttributes.eGenericType.eClassifier->includes(EMap) or 
  aClass.eReferences.many->count(true) > 0 /]

[query public typeArguments(att: EAttribute) : String =
  if att.eGenericType.eTypeArguments.eClassifier->size() > 0 then
    '<' + att.eGenericType.eTypeArguments.eClassifier.instanceTypeName.replace('java.lang.', '')->asSequence()->sep(',') + '>'
  else
    ''
  endif
/]

[query public packageString(c : EClass) : Sequence(String) = 
  c.ancestors(EPackage)->reverse().name.toLower()->sep('.')/]

[query public packagePath(c : EClass) : Sequence(String) = 
  c.ancestors(EPackage)->reverse().name.toLower()->sep('/')/]

[template public generateClassJava(aClass : EClass)]
[comment @main /]
[file ('java/' + packagePath(aClass) + '/' + aClass.name.concat('.java'), false, 'UTF-8')]
package [packageString(aClass)/];

[if needsMap(aClass) = true]
import java.util.Map;

[/if]
public final class [aClass.name/] {

  // Atts generated directly from the forsyde Schema. 
  [for (att : EAttribute | aClass.eAllAttributes)]
  public [att.eType.instanceTypeName.tokenize('.')->last()/][typeArguments(att)/] [att.name/];
  [/for]

  // Refs generated directly from the forsyde Schema.
  [for (ref : EReference | aClass.eAllReferences)]
  [if (ref.many)]
  public Map<String, [ref.eType.name/]> [ref.name/];
  [else]
  [ref.eType.name/] [ref.name/];	
  [/if]
  [/for]

}
[/file]
[/template]