[%
var enumTemplate := TemplateFactory.load('templates/forsyde2py_enum.egl');
var classTemplate := TemplateFactory.load('templates/forsyde2py_class.egl');
%]
[*Here starts the actual template*]
[%if(package.eClassifiers.exists(e : ForSyDe!EEnum | true)) {%]
from enum import Enum
[%}%]
import lxml.etree as etree
[%for (imp in package.getImports()) { %]
from [%=imp.getPackagePath()%] import *
[%}%]

_namespaces = {
[%=package.getAllParentsAndChildren().collect(p | "'" + p.nsPrefix + "': '" + p.nsUri + "'").concat(',\n')%]
}

[%for (enum in package.eClassifiers.select(e : ForSyDe!EEnum | true)) {%]
[%enumTemplate.populate('enum', enum);%]
[%=enumTemplate.process()%]
[%}%]

[%for (class in package.getClassesSorted()) {  %]
[%classTemplate.populate('class', class);%]
[%=classTemplate.process()%]
[%}%]
[*Here it finishes*]
[%

operation ForSyDe!EPackage getClassesSorted() : OrderedSet {
    var valueMap = new Map;
    var classes = self.getEClassifiers().select(f : ForSyDe!EClass | true);
    // STOPPED HERE, MUST MAKE CONSTRUCTOR REFERENCES WORK
    for(i in Sequence{1..classes.size()-1}) {
	    for(class in classes) {
	    	var depsNum = classes.select(c | c.eAllSuperTypes.isDefined() and c.eAllSuperTypes.contains(class))
	    					.collect(c | valueMap.get(c)).max();
	    	valueMap.put(class, depsNum + 1);
	    }
    }
    return classes.sortBy(c | valueMap.get(c)).invert().asOrderedSet();
}

@cached
operation ForSyDe!EPackage getPackageChildren() : Sequence {
    var seq = new Sequence;
    for (child in self.getESubpackages()) {
        seq.add(child);
        seq.addAll(child.getPackageChildren());
    }
    return seq;
}

@cached
operation ForSyDe!EClass getFeatures() : OrderedSet {
    var features = new OrderedSet;
    for(super in self.eSuperTypes) {
        features.addAll(super.getFeatures());
    }
    features.addAll(self.eStructuralFeatures);
    return features;
}

@cached
operation ForSyDe!EPackage getImports() : Set {
	var imp = new Set;
	for (class in self.getEClassifiers().select(f : ForSyDe!EClass | true)) { 
		for (subpack in class.getFeatures()
				.collect(ref : ForSyDe!EReference | ref.getEReferenceType().getEPackage())) {
			if (subpack <> self) {
				imp.add(subpack);
			    //imp.addAll(subpack.getImports());
			}
		}
	}
	return imp;
}

@cached
operation ForSyDe!EPackage getPackagePath() : String {
    if (self.getESuperPackage().isDefined()) {
        return self.getESuperPackage().getPackagePath() + "." + self.name;
    } else {
    	return self.name;
    }
}

@cached
operation ForSyDe!EPackage getAllParentsAndChildren() : Set {
	var set = self. getAllParentsAndSelf();
	set.addAll(self.getAllChildrenAndSelf());
	return set;
}

@cached
operation ForSyDe!EPackage getAllParentsAndSelf() : Set {
	var set : Set;
	if (self.getESuperPackage().isDefined()) {
        set = self.getESuperPackage().getAllParentsAndSelf();
    } else {
    	set = new Set;
    }
    set.add(self);
    return set;
}

@cached
operation ForSyDe!EPackage getAllChildrenAndSelf() : Set {
	var set : Set;
	if (self.eSubpackages.size() > 0) {
		for(sub in self.eSubpackages) {
			set.addAll(sub.getAllChildrenAndSelf());
		}
	} else {
		set = new Set;	
	}
	set.add(self);
	return set;
}
%]