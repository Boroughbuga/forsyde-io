/**
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.meta.util;

import io.github.forsyde.io.meta.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see io.github.forsyde.io.meta.MetaPackage
 * @generated
 */
public class MetaSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MetaPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MetaPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MetaPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT:
      {
        VertexTrait vertexTrait = (VertexTrait)theEObject;
        T result = caseVertexTrait(vertexTrait);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_PROPERTY:
      {
        VertexTraitProperty vertexTraitProperty = (VertexTraitProperty)theEObject;
        T result = caseVertexTraitProperty(vertexTraitProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_PROPERTY_TYPE:
      {
        VertexTraitPropertyType vertexTraitPropertyType = (VertexTraitPropertyType)theEObject;
        T result = caseVertexTraitPropertyType(vertexTraitPropertyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_INT_PROPERTY:
      {
        VertexTraitIntProperty vertexTraitIntProperty = (VertexTraitIntProperty)theEObject;
        T result = caseVertexTraitIntProperty(vertexTraitIntProperty);
        if (result == null) result = caseVertexTraitPropertyType(vertexTraitIntProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_REAL_PROPERTY:
      {
        VertexTraitRealProperty vertexTraitRealProperty = (VertexTraitRealProperty)theEObject;
        T result = caseVertexTraitRealProperty(vertexTraitRealProperty);
        if (result == null) result = caseVertexTraitPropertyType(vertexTraitRealProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_BOOL_PROPERTY:
      {
        VertexTraitBoolProperty vertexTraitBoolProperty = (VertexTraitBoolProperty)theEObject;
        T result = caseVertexTraitBoolProperty(vertexTraitBoolProperty);
        if (result == null) result = caseVertexTraitPropertyType(vertexTraitBoolProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_STRING_PROPERTY:
      {
        VertexTraitStringProperty vertexTraitStringProperty = (VertexTraitStringProperty)theEObject;
        T result = caseVertexTraitStringProperty(vertexTraitStringProperty);
        if (result == null) result = caseVertexTraitPropertyType(vertexTraitStringProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_ARRAY_PROPERTY:
      {
        VertexTraitArrayProperty vertexTraitArrayProperty = (VertexTraitArrayProperty)theEObject;
        T result = caseVertexTraitArrayProperty(vertexTraitArrayProperty);
        if (result == null) result = caseVertexTraitPropertyType(vertexTraitArrayProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_OBJECT_PROPERTY:
      {
        VertexTraitObjectProperty vertexTraitObjectProperty = (VertexTraitObjectProperty)theEObject;
        T result = caseVertexTraitObjectProperty(vertexTraitObjectProperty);
        if (result == null) result = caseVertexTraitPropertyType(vertexTraitObjectProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.VERTEX_TRAIT_PORT:
      {
        VertexTraitPort vertexTraitPort = (VertexTraitPort)theEObject;
        T result = caseVertexTraitPort(vertexTraitPort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.EDGE_TRAIT:
      {
        EdgeTrait edgeTrait = (EdgeTrait)theEObject;
        T result = caseEdgeTrait(edgeTrait);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MetaPackage.EDGE_TRAIT_CONSTRAINT:
      {
        EdgeTraitConstraint edgeTraitConstraint = (EdgeTraitConstraint)theEObject;
        T result = caseEdgeTraitConstraint(edgeTraitConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTrait(VertexTrait object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitProperty(VertexTraitProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Property Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Property Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitPropertyType(VertexTraitPropertyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Int Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Int Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitIntProperty(VertexTraitIntProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Real Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Real Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitRealProperty(VertexTraitRealProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Bool Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Bool Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitBoolProperty(VertexTraitBoolProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait String Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait String Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitStringProperty(VertexTraitStringProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Array Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Array Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitArrayProperty(VertexTraitArrayProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Object Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Object Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitObjectProperty(VertexTraitObjectProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Vertex Trait Port</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Vertex Trait Port</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVertexTraitPort(VertexTraitPort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Edge Trait</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Edge Trait</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEdgeTrait(EdgeTrait object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Edge Trait Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Edge Trait Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEdgeTraitConstraint(EdgeTraitConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MetaSwitch
