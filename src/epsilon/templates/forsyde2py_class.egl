[%
var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
var ecoreUtil = emfTool.ecoreUtil;

var vertexClass = ForSyDe!EClass.all().selectOne(e | e.getName() == "Vertex");
var edgeClass = ForSyDe!EClass.all().selectOne(e | e.getName() == "Edge");
%]
from forsyde.io.python import core


[% for(class in vertexClass.getAllSubTypes()) { %]
class [%=class.name%](core.Vertex):
	"""
	This package has been generated automatically from the ForSyDe IO types model.
	Any code in this file may be overwritten without notice, so it's best not to spend
	time modifying anything here, but on the true source which is a model file.
	"""

    def get_type_name(self) -> str:
        return "[%= class.name %]"
        
    [% for (r in class.getEReferences().select(r | e.getEType().name == "Port")) { %]
    def get_port_[%=r.name%](self) -> core.Port:
        return self.get_port("[%=r.name%]")

    [% } %]
    [% for (r in class.getEReferences().select(r | e.getEType().name == "Port")) { %]	
    def get_[%=r.name%](self, model) -> [%=r.EGenericType.ETypeArguments.head.EClassifier.name%]:
        out_port = self.get_port_[%=r.name%]()
        for n in model.adj[self]:
            for (_, edata) in model.edges[self][n]:
                edge = edata["object"]
                if edge.source_vertex_port == out_port:
                    return edge.target_vertex
        raise AttributeError(f"Port [%=r.name%] of {self.identifier} does not exist.")

    [% } %]
    «FOR r : cls.EReferences.filter[EType.name.contains("Property")]»
    def get_«r.name»(self):
        try:
            return self.properties["«r.name»"]
        except KeyError:
            raise AttributeError(f"Vertex {self.identifier} has no '«r.name»' property.")
   	«ENDFOR»
[% } %]
[%
@cached
operation ForSyDe!EClass getFeatures() : OrderedSet {
    var features = new OrderedSet;
    for(super in self.eSuperTypes) {
        features.addAll(super.getFeatures());
    }
    features.addAll(self.eStructuralFeatures);
    return features;
}
%]