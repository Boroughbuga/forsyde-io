/*
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import io.github.forsyde.io.ide.contentassist.antlr.internal.InternalMetaParser;
import io.github.forsyde.io.services.MetaGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MetaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MetaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MetaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getTraitsAlternatives_0(), "rule__Model__TraitsAlternatives_0");
			builder.put(grammarAccess.getVertexTraitPropertyTypeAccess().getAlternatives(), "rule__VertexTraitPropertyType__Alternatives");
			builder.put(grammarAccess.getVertexTraitIntPropertyAccess().getAlternatives_0(), "rule__VertexTraitIntProperty__Alternatives_0");
			builder.put(grammarAccess.getVertexTraitRealPropertyAccess().getAlternatives_0(), "rule__VertexTraitRealProperty__Alternatives_0");
			builder.put(grammarAccess.getVertexTraitBoolPropertyAccess().getAlternatives_0(), "rule__VertexTraitBoolProperty__Alternatives_0");
			builder.put(grammarAccess.getVertexTraitStringPropertyAccess().getAlternatives_0(), "rule__VertexTraitStringProperty__Alternatives_0");
			builder.put(grammarAccess.getEdgeTraitConstraintAccess().getAlternatives_1(), "rule__EdgeTraitConstraint__Alternatives_1");
			builder.put(grammarAccess.getVertexTraitPortDirectionAccess().getAlternatives(), "rule__VertexTraitPortDirection__Alternatives");
			builder.put(grammarAccess.getVertexTraitAccess().getGroup(), "rule__VertexTrait__Group__0");
			builder.put(grammarAccess.getVertexTraitAccess().getGroup_2(), "rule__VertexTrait__Group_2__0");
			builder.put(grammarAccess.getVertexTraitAccess().getGroup_2_2(), "rule__VertexTrait__Group_2_2__0");
			builder.put(grammarAccess.getVertexTraitPropertyAccess().getGroup(), "rule__VertexTraitProperty__Group__0");
			builder.put(grammarAccess.getVertexTraitIntPropertyAccess().getGroup(), "rule__VertexTraitIntProperty__Group__0");
			builder.put(grammarAccess.getVertexTraitIntPropertyAccess().getGroup_1(), "rule__VertexTraitIntProperty__Group_1__0");
			builder.put(grammarAccess.getVertexTraitRealPropertyAccess().getGroup(), "rule__VertexTraitRealProperty__Group__0");
			builder.put(grammarAccess.getVertexTraitRealPropertyAccess().getGroup_1(), "rule__VertexTraitRealProperty__Group_1__0");
			builder.put(grammarAccess.getVertexTraitBoolPropertyAccess().getGroup(), "rule__VertexTraitBoolProperty__Group__0");
			builder.put(grammarAccess.getVertexTraitBoolPropertyAccess().getGroup_1(), "rule__VertexTraitBoolProperty__Group_1__0");
			builder.put(grammarAccess.getVertexTraitStringPropertyAccess().getGroup(), "rule__VertexTraitStringProperty__Group__0");
			builder.put(grammarAccess.getVertexTraitStringPropertyAccess().getGroup_1(), "rule__VertexTraitStringProperty__Group_1__0");
			builder.put(grammarAccess.getVertexTraitArrayPropertyAccess().getGroup(), "rule__VertexTraitArrayProperty__Group__0");
			builder.put(grammarAccess.getVertexTraitObjectPropertyAccess().getGroup(), "rule__VertexTraitObjectProperty__Group__0");
			builder.put(grammarAccess.getVertexTraitPortAccess().getGroup_2(), "rule__VertexTraitPort__Group_2__0");
			builder.put(grammarAccess.getEdgeTraitAccess().getGroup(), "rule__EdgeTrait__Group__0");
			builder.put(grammarAccess.getEdgeTraitAccess().getGroup_2(), "rule__EdgeTrait__Group_2__0");
			builder.put(grammarAccess.getEdgeTraitAccess().getGroup_2_2(), "rule__EdgeTrait__Group_2_2__0");
			builder.put(grammarAccess.getEdgeTraitConstraintAccess().getGroup(), "rule__EdgeTraitConstraint__Group__0");
			builder.put(grammarAccess.getEdgeTraitConstraintAccess().getGroup_3(), "rule__EdgeTraitConstraint__Group_3__0");
			builder.put(grammarAccess.getModelAccess().getTraitsAssignment(), "rule__Model__TraitsAssignment");
			builder.put(grammarAccess.getVertexTraitAccess().getNameAssignment_1(), "rule__VertexTrait__NameAssignment_1");
			builder.put(grammarAccess.getVertexTraitAccess().getRefinesAssignment_2_1(), "rule__VertexTrait__RefinesAssignment_2_1");
			builder.put(grammarAccess.getVertexTraitAccess().getRefinesAssignment_2_2_1(), "rule__VertexTrait__RefinesAssignment_2_2_1");
			builder.put(grammarAccess.getVertexTraitAccess().getPortsAssignment_4(), "rule__VertexTrait__PortsAssignment_4");
			builder.put(grammarAccess.getVertexTraitAccess().getPropertiesAssignment_7(), "rule__VertexTrait__PropertiesAssignment_7");
			builder.put(grammarAccess.getVertexTraitPropertyAccess().getNameAssignment_1(), "rule__VertexTraitProperty__NameAssignment_1");
			builder.put(grammarAccess.getVertexTraitPropertyAccess().getTypeAssignment_3(), "rule__VertexTraitProperty__TypeAssignment_3");
			builder.put(grammarAccess.getVertexTraitIntPropertyAccess().getDefaultAssignment_1_1(), "rule__VertexTraitIntProperty__DefaultAssignment_1_1");
			builder.put(grammarAccess.getVertexTraitRealPropertyAccess().getDoubleAssignment_0_1(), "rule__VertexTraitRealProperty__DoubleAssignment_0_1");
			builder.put(grammarAccess.getVertexTraitRealPropertyAccess().getDefaultAssignment_1_1(), "rule__VertexTraitRealProperty__DefaultAssignment_1_1");
			builder.put(grammarAccess.getVertexTraitBoolPropertyAccess().getDefaultAssignment_1_1(), "rule__VertexTraitBoolProperty__DefaultAssignment_1_1");
			builder.put(grammarAccess.getVertexTraitStringPropertyAccess().getDefaultAssignment_1_1(), "rule__VertexTraitStringProperty__DefaultAssignment_1_1");
			builder.put(grammarAccess.getVertexTraitArrayPropertyAccess().getItemTypeAssignment_2(), "rule__VertexTraitArrayProperty__ItemTypeAssignment_2");
			builder.put(grammarAccess.getVertexTraitObjectPropertyAccess().getKeyTypeAssignment_2(), "rule__VertexTraitObjectProperty__KeyTypeAssignment_2");
			builder.put(grammarAccess.getVertexTraitObjectPropertyAccess().getValueTypeAssignment_4(), "rule__VertexTraitObjectProperty__ValueTypeAssignment_4");
			builder.put(grammarAccess.getVertexTraitPortAccess().getMultipleAssignment_0(), "rule__VertexTraitPort__MultipleAssignment_0");
			builder.put(grammarAccess.getVertexTraitPortAccess().getOrderedAssignment_1(), "rule__VertexTraitPort__OrderedAssignment_1");
			builder.put(grammarAccess.getVertexTraitPortAccess().getDirectionAssignment_2_0(), "rule__VertexTraitPort__DirectionAssignment_2_0");
			builder.put(grammarAccess.getVertexTraitPortAccess().getNameAssignment_2_2(), "rule__VertexTraitPort__NameAssignment_2_2");
			builder.put(grammarAccess.getVertexTraitPortAccess().getTraitAssignment_2_4(), "rule__VertexTraitPort__TraitAssignment_2_4");
			builder.put(grammarAccess.getEdgeTraitAccess().getNameAssignment_1(), "rule__EdgeTrait__NameAssignment_1");
			builder.put(grammarAccess.getEdgeTraitAccess().getRefinesAssignment_2_1(), "rule__EdgeTrait__RefinesAssignment_2_1");
			builder.put(grammarAccess.getEdgeTraitAccess().getRefinesAssignment_2_2_1(), "rule__EdgeTrait__RefinesAssignment_2_2_1");
			builder.put(grammarAccess.getEdgeTraitAccess().getSpecsAssignment_4(), "rule__EdgeTrait__SpecsAssignment_4");
			builder.put(grammarAccess.getEdgeTraitConstraintAccess().getTargetAssignment_1_0(), "rule__EdgeTraitConstraint__TargetAssignment_1_0");
			builder.put(grammarAccess.getEdgeTraitConstraintAccess().getSourceAssignment_1_1(), "rule__EdgeTraitConstraint__SourceAssignment_1_1");
			builder.put(grammarAccess.getEdgeTraitConstraintAccess().getFilterAssignment_2(), "rule__EdgeTraitConstraint__FilterAssignment_2");
			builder.put(grammarAccess.getEdgeTraitConstraintAccess().getFilterAssignment_3_1(), "rule__EdgeTraitConstraint__FilterAssignment_3_1");
			builder.put(grammarAccess.getVertexTraitPortAccess().getUnorderedGroup(), "rule__VertexTraitPort__UnorderedGroup");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MetaGrammarAccess grammarAccess;

	@Override
	protected InternalMetaParser createParser() {
		InternalMetaParser result = new InternalMetaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MetaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MetaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
