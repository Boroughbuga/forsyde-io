[%
var parseTemplate := TemplateFactory.load('templates/forsyde2py_class_parse.egl');
parseTemplate.populate('class', class);

var dumpTemplate := TemplateFactory.load('templates/forsyde2py_class_dump.egl');
dumpTemplate.populate('class', class); 

var copyTemplate := TemplateFactory.load('templates/forsyde2py_class_copy.egl');
copyTemplate.populate('class', class);
%]
[%if (class.eSuperTypes.size() > 0) { %]
class [%=class.name%]([%=class.eSuperTypes.name.concat(',')%]):
[% } else { %]
class [%=class.name%]():
[% } %]
    '''
    This class has been generated automatically from the ForSyDe Component Metaschema.
    Particular comments follow wherever pertinent.
    '''

    def __init__(self
            [*Generate the attributes with their default values*]
            [%for (att in class.getFeatures().select(a : ForSyDe!EAttribute | true)) { %]
            ,[%=att.name%]=None
            [%}%]
            [*Generate referneces with their default values *]
            [%for (ref in class.getFeatures().select(a : ForSyDe!EReference | true)) { %]
            ,[%=ref.name%]=None
            [%}%]
        ):
        [* pass stuff to parent constructors *]
        [%for (parent in class.eSuperTypes) {%]
        [%=parent.name%].__init__(self,[%=parent.getFeatures().collect(e | e.name + '=' + e.name).concat(',\n')%])
        [%}%]
        [*Generate the attributes with their default values*]
        [%for (att in class.eStructuralFeatures.select(a : ForSyDe!EAttribute | true)) { %]
        [%if (att.lowerBound = 1 and att.upperBound = 1 and att.defaultValue.isDefined()) {%]
        # attribute cannot be null and has a default value
        if not [%=att.name%]:
            [%if(att.getEAttributeType().isKindOf(ForSyDe!EEnum)) {%]
            self.[%=att.name%] = [%=att.getEAttributeType().name%].[%=att.defaultValue%]
            [%} else if (att.getEAttributeType().name = "String"){%]
            self.[%=att.name%] = "[%=att.defaultValue%]"
            [%} else {%]
            self.[%=att.name%] = [%=att.defaultValue%]
            [%}%]
        [%} else if (att.upperBound = -1) {%]
        if not [%=att.name%]:
            self.[%=att.name%] = []
        else:
            self.[%=att.name%] = [%=att.name%]
        [%}else{%]
        self.[%=att.name%] = [%=att.name%]
        [%}%]
        [%}%]
        [*Generate references with their default values *]
        [%for (ref in class.getFeatures().select(a : ForSyDe!EReference | true)) { %]
        [%if (ref.lowerBound = 1 and ref.upperBound = 1) {%]
        # reference cannot be null
        if not [%=ref.name%]:
            self.[%=ref.name%]=[%=ref.eType.name%]()
        [%} else if (ref.upperBound = -1) {%]
        if not [%=ref.name%]:
            self.[%=ref.name%] = []
        else:
            self.[%=ref.name%] = [%=ref.name%]
        [%}else{%]
        self.[%=ref.name%] = [%=ref.name%]
        [%}%]
        [%}%]
        
    def __str__(self):
        return str(id(self)) + '(' + str(self.__class__) + "): " + str(self.__dict__)
    
    [%=parseTemplate.process()%]
    
    [%if(class.name = 'ForSyDeIO') {%]
    @classmethod
    def parse(cls, source):
        if isinstance(source, str):
            return cls._parseXMI(etree.parse(source).getroot())
    [%}%]
    
    [%=dumpTemplate.process()%]
    
    [%if(class.name = 'ForSyDeIO') {%]
    def dump(self, target):
        if isinstance(target, str):
            content = self._dumpXMI(elem = etree.Element(etree.QName('ForSyDe.Model', '[%=class.name%]'), nsmap=_namespaces))
            tree = etree.ElementTree(content)
            tree.write(target, pretty_print=True, encoding='utf-8', xml_declaration=True)                
    [%}%]
    
    [%if (class.getFeatures().exists(f | f.name = 'identifier')) {%]
    def prependIdentifier(self, prefix=""):
        '''
        This method enables imported definitions to be properly instantiated with scoping (ID scoping).
        '''
        [%for (parent in class.eSuperTypes) {%]
        [%=parent.name%].prependIdentifier(self, prefix)
        [%}%]
        [%if (class.eSuperTypes.size() = 0 or 
        		class.eSuperTypes.collect(e | e.getFeatures())
        		.flatten().exists(f | f.name = 'identifier') = false) {%]
        self.identifier = prefix + self.identifier
        [%}%]
        [%for (ref in class.eStructuralFeatures.select(a : ForSyDe!EReference | a.eType.getFeatures().exists(f | f.name = 'identifier'))) { %]
        [%if (ref.lowerBound = 0 and ref.upperBound = 1) {%]
        if self.[%=ref.name%]:
            self.[%=ref.name%].prependIdentifier(prefix) 
        [%}else if (ref.lowerBound = 1 and ref.upperBound = 1){%]
        self.[%=ref.name%].prependIdentifier(prefix)
        [%} else {%]
        if self.[%=ref.name%]:
            for child in self.[%=ref.name%]:
                child.prependIdentifier(prefix)
        [%}%]
        [%}%]
    [%}%]
    
    [%if (class.getFeatures().exists(f | f.name = 'identifier')) {%]
    def appendIdentifier(self, sufix=""):
        '''
        This method enables imported definitions to be properly instantiated with scoping (ID scoping).
        '''
        [%for (parent in class.eSuperTypes) {%]
        [%=parent.name%].appendIdentifier(self, sufix)
        [%}%]
        [%if (class.eSuperTypes.size() = 0 or 
        		class.eSuperTypes.collect(e | e.getFeatures())
        		.flatten().exists(f | f.name = 'identifier') = false) {%]
        self.identifier += sufix
        [%}%]
        [%for (ref in class.eStructuralFeatures.select(a : ForSyDe!EReference | a.eType.getFeatures().exists(f | f.name = 'identifier'))) { %]
        [%if (ref.lowerBound = 0 and ref.upperBound = 1) {%]
        if self.[%=ref.name%]:
            self.[%=ref.name%].appendIdentifier(sufix) 
        [%}else if (ref.lowerBound = 1 and ref.upperBound = 1){%]
        self.[%=ref.name%].appendIdentifier(sufix)
        [%} else {%]
        if self.[%=ref.name%]:
            for child in self.[%=ref.name%]:
                child.appendIdentifier(sufix)
        [%}%]
        [%}%]
    [%}%]
    
    [%=copyTemplate.process()%]
        
[%
@cached
operation ForSyDe!EClass getFeatures() : OrderedSet {
    var features = new OrderedSet;
    for(super in self.eSuperTypes) {
        features.addAll(super.getFeatures());
    }
    features.addAll(self.eStructuralFeatures);
    return features;
}
%]