/**
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.meta.impl;

import io.github.forsyde.io.meta.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MetaFactoryImpl extends EFactoryImpl implements MetaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MetaFactory init()
  {
    try
    {
      MetaFactory theMetaFactory = (MetaFactory)EPackage.Registry.INSTANCE.getEFactory(MetaPackage.eNS_URI);
      if (theMetaFactory != null)
      {
        return theMetaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MetaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MetaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MetaPackage.MODEL: return createModel();
      case MetaPackage.VERTEX_TRAIT: return createVertexTrait();
      case MetaPackage.VERTEX_TRAIT_PROPERTY: return createVertexTraitProperty();
      case MetaPackage.VERTEX_TRAIT_PROPERTY_TYPE: return createVertexTraitPropertyType();
      case MetaPackage.VERTEX_TRAIT_INT_PROPERTY: return createVertexTraitIntProperty();
      case MetaPackage.VERTEX_TRAIT_REAL_PROPERTY: return createVertexTraitRealProperty();
      case MetaPackage.VERTEX_TRAIT_BOOL_PROPERTY: return createVertexTraitBoolProperty();
      case MetaPackage.VERTEX_TRAIT_STRING_PROPERTY: return createVertexTraitStringProperty();
      case MetaPackage.VERTEX_TRAIT_ARRAY_PROPERTY: return createVertexTraitArrayProperty();
      case MetaPackage.VERTEX_TRAIT_OBJECT_PROPERTY: return createVertexTraitObjectProperty();
      case MetaPackage.VERTEX_TRAIT_PORT: return createVertexTraitPort();
      case MetaPackage.EDGE_TRAIT: return createEdgeTrait();
      case MetaPackage.EDGE_TRAIT_CONSTRAINT: return createEdgeTraitConstraint();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MetaPackage.VERTEX_TRAIT_PORT_DIRECTION:
        return createVertexTraitPortDirectionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MetaPackage.VERTEX_TRAIT_PORT_DIRECTION:
        return convertVertexTraitPortDirectionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTrait createVertexTrait()
  {
    VertexTraitImpl vertexTrait = new VertexTraitImpl();
    return vertexTrait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitProperty createVertexTraitProperty()
  {
    VertexTraitPropertyImpl vertexTraitProperty = new VertexTraitPropertyImpl();
    return vertexTraitProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitPropertyType createVertexTraitPropertyType()
  {
    VertexTraitPropertyTypeImpl vertexTraitPropertyType = new VertexTraitPropertyTypeImpl();
    return vertexTraitPropertyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitIntProperty createVertexTraitIntProperty()
  {
    VertexTraitIntPropertyImpl vertexTraitIntProperty = new VertexTraitIntPropertyImpl();
    return vertexTraitIntProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitRealProperty createVertexTraitRealProperty()
  {
    VertexTraitRealPropertyImpl vertexTraitRealProperty = new VertexTraitRealPropertyImpl();
    return vertexTraitRealProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitBoolProperty createVertexTraitBoolProperty()
  {
    VertexTraitBoolPropertyImpl vertexTraitBoolProperty = new VertexTraitBoolPropertyImpl();
    return vertexTraitBoolProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitStringProperty createVertexTraitStringProperty()
  {
    VertexTraitStringPropertyImpl vertexTraitStringProperty = new VertexTraitStringPropertyImpl();
    return vertexTraitStringProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitArrayProperty createVertexTraitArrayProperty()
  {
    VertexTraitArrayPropertyImpl vertexTraitArrayProperty = new VertexTraitArrayPropertyImpl();
    return vertexTraitArrayProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitObjectProperty createVertexTraitObjectProperty()
  {
    VertexTraitObjectPropertyImpl vertexTraitObjectProperty = new VertexTraitObjectPropertyImpl();
    return vertexTraitObjectProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VertexTraitPort createVertexTraitPort()
  {
    VertexTraitPortImpl vertexTraitPort = new VertexTraitPortImpl();
    return vertexTraitPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EdgeTrait createEdgeTrait()
  {
    EdgeTraitImpl edgeTrait = new EdgeTraitImpl();
    return edgeTrait;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EdgeTraitConstraint createEdgeTraitConstraint()
  {
    EdgeTraitConstraintImpl edgeTraitConstraint = new EdgeTraitConstraintImpl();
    return edgeTraitConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VertexTraitPortDirection createVertexTraitPortDirectionFromString(EDataType eDataType, String initialValue)
  {
    VertexTraitPortDirection result = VertexTraitPortDirection.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVertexTraitPortDirectionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MetaPackage getMetaPackage()
  {
    return (MetaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MetaPackage getPackage()
  {
    return MetaPackage.eINSTANCE;
  }

} //MetaFactoryImpl
