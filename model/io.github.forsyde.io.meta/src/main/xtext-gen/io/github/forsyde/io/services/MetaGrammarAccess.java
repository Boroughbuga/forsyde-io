/*
 * generated by Xtext 2.25.0
 */
package io.github.forsyde.io.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MetaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.Model");
		private final Assignment cTraitsAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTraitsAlternatives_0 = (Alternatives)cTraitsAssignment.eContents().get(0);
		private final RuleCall cTraitsVertexTraitParserRuleCall_0_0 = (RuleCall)cTraitsAlternatives_0.eContents().get(0);
		private final RuleCall cTraitsEdgeTraitParserRuleCall_0_1 = (RuleCall)cTraitsAlternatives_0.eContents().get(1);
		
		//Model:
		//    traits+=(VertexTrait|EdgeTrait)*;
		@Override public ParserRule getRule() { return rule; }
		
		//traits+=(VertexTrait|EdgeTrait)*
		public Assignment getTraitsAssignment() { return cTraitsAssignment; }
		
		//(VertexTrait|EdgeTrait)
		public Alternatives getTraitsAlternatives_0() { return cTraitsAlternatives_0; }
		
		//VertexTrait
		public RuleCall getTraitsVertexTraitParserRuleCall_0_0() { return cTraitsVertexTraitParserRuleCall_0_0; }
		
		//EdgeTrait
		public RuleCall getTraitsEdgeTraitParserRuleCall_0_1() { return cTraitsEdgeTraitParserRuleCall_0_1; }
	}
	public class VertexTraitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTrait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVertexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRefinesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefinesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefinesVertexTraitCrossReference_2_1_0 = (CrossReference)cRefinesAssignment_2_1.eContents().get(0);
		private final RuleCall cRefinesVertexTraitIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefinesVertexTraitCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cRefinesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cRefinesVertexTraitCrossReference_2_2_1_0 = (CrossReference)cRefinesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cRefinesVertexTraitIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cRefinesVertexTraitCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortsVertexTraitPortParserRuleCall_4_0 = (RuleCall)cPortsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cPropertiesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertiesVertexTraitPropertyParserRuleCall_7_0 = (RuleCall)cPropertiesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//VertexTrait:
		//    'vertex' name=ID ('refines' refines+=[VertexTrait] (',' refines+=[VertexTrait])*)?
		//     '(' (ports+=VertexTraitPort)* ')'
		//     '{' (properties+=VertexTraitProperty)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'vertex' name=ID ('refines' refines+=[VertexTrait] (',' refines+=[VertexTrait])*)?
		// '(' (ports+=VertexTraitPort)* ')'
		// '{' (properties+=VertexTraitProperty)* '}'
		public Group getGroup() { return cGroup; }
		
		//'vertex'
		public Keyword getVertexKeyword_0() { return cVertexKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('refines' refines+=[VertexTrait] (',' refines+=[VertexTrait])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'refines'
		public Keyword getRefinesKeyword_2_0() { return cRefinesKeyword_2_0; }
		
		//refines+=[VertexTrait]
		public Assignment getRefinesAssignment_2_1() { return cRefinesAssignment_2_1; }
		
		//[VertexTrait]
		public CrossReference getRefinesVertexTraitCrossReference_2_1_0() { return cRefinesVertexTraitCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefinesVertexTraitIDTerminalRuleCall_2_1_0_1() { return cRefinesVertexTraitIDTerminalRuleCall_2_1_0_1; }
		
		//(',' refines+=[VertexTrait])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//refines+=[VertexTrait]
		public Assignment getRefinesAssignment_2_2_1() { return cRefinesAssignment_2_2_1; }
		
		//[VertexTrait]
		public CrossReference getRefinesVertexTraitCrossReference_2_2_1_0() { return cRefinesVertexTraitCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getRefinesVertexTraitIDTerminalRuleCall_2_2_1_0_1() { return cRefinesVertexTraitIDTerminalRuleCall_2_2_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(ports+=VertexTraitPort)*
		public Assignment getPortsAssignment_4() { return cPortsAssignment_4; }
		
		//VertexTraitPort
		public RuleCall getPortsVertexTraitPortParserRuleCall_4_0() { return cPortsVertexTraitPortParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(properties+=VertexTraitProperty)*
		public Assignment getPropertiesAssignment_7() { return cPropertiesAssignment_7; }
		
		//VertexTraitProperty
		public RuleCall getPropertiesVertexTraitPropertyParserRuleCall_7_0() { return cPropertiesVertexTraitPropertyParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class VertexTraitPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeVertexTraitPropertyTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VertexTraitProperty:
		//    'property' name=ID ':' type=VertexTraitPropertyType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' name=ID ':' type=VertexTraitPropertyType
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=VertexTraitPropertyType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//VertexTraitPropertyType
		public RuleCall getTypeVertexTraitPropertyTypeParserRuleCall_3_0() { return cTypeVertexTraitPropertyTypeParserRuleCall_3_0; }
	}
	public class VertexTraitPropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitPropertyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVertexTraitIntPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVertexTraitRealPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVertexTraitBoolPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVertexTraitStringPropertyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVertexTraitArrayPropertyParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVertexTraitObjectPropertyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//VertexTraitPropertyType:
		//    VertexTraitIntProperty |
		//    VertexTraitRealProperty |
		//    VertexTraitBoolProperty |
		//    VertexTraitStringProperty |
		//    VertexTraitArrayProperty |
		//    VertexTraitObjectProperty
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VertexTraitIntProperty |
		//VertexTraitRealProperty |
		//VertexTraitBoolProperty |
		//VertexTraitStringProperty |
		//VertexTraitArrayProperty |
		//VertexTraitObjectProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VertexTraitIntProperty
		public RuleCall getVertexTraitIntPropertyParserRuleCall_0() { return cVertexTraitIntPropertyParserRuleCall_0; }
		
		//VertexTraitRealProperty
		public RuleCall getVertexTraitRealPropertyParserRuleCall_1() { return cVertexTraitRealPropertyParserRuleCall_1; }
		
		//VertexTraitBoolProperty
		public RuleCall getVertexTraitBoolPropertyParserRuleCall_2() { return cVertexTraitBoolPropertyParserRuleCall_2; }
		
		//VertexTraitStringProperty
		public RuleCall getVertexTraitStringPropertyParserRuleCall_3() { return cVertexTraitStringPropertyParserRuleCall_3; }
		
		//VertexTraitArrayProperty
		public RuleCall getVertexTraitArrayPropertyParserRuleCall_4() { return cVertexTraitArrayPropertyParserRuleCall_4; }
		
		//VertexTraitObjectProperty
		public RuleCall getVertexTraitObjectPropertyParserRuleCall_5() { return cVertexTraitObjectPropertyParserRuleCall_5; }
	}
	public class VertexTraitIntPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitIntProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cIntegerKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefaultINTTerminalRuleCall_1_1_0 = (RuleCall)cDefaultAssignment_1_1.eContents().get(0);
		
		//VertexTraitIntProperty:
		//    ('int'|'integer') ('=' default=INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('int'|'integer') ('=' default=INT)?
		public Group getGroup() { return cGroup; }
		
		//('int'|'integer')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'int'
		public Keyword getIntKeyword_0_0() { return cIntKeyword_0_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_0_1() { return cIntegerKeyword_0_1; }
		
		//('=' default=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//default=INT
		public Assignment getDefaultAssignment_1_1() { return cDefaultAssignment_1_1; }
		
		//INT
		public RuleCall getDefaultINTTerminalRuleCall_1_1_0() { return cDefaultINTTerminalRuleCall_1_1_0; }
	}
	public class VertexTraitRealPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitRealProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cDoubleAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cDoubleDoubleKeyword_0_1_0 = (Keyword)cDoubleAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefaultSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cDefaultAssignment_1_1.eContents().get(0);
		
		//VertexTraitRealProperty:
		//    ('float'|double?='double') ('=' default=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('float'|double?='double') ('=' default=STRING)?
		public Group getGroup() { return cGroup; }
		
		//('float'|double?='double')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'float'
		public Keyword getFloatKeyword_0_0() { return cFloatKeyword_0_0; }
		
		//double?='double'
		public Assignment getDoubleAssignment_0_1() { return cDoubleAssignment_0_1; }
		
		//'double'
		public Keyword getDoubleDoubleKeyword_0_1_0() { return cDoubleDoubleKeyword_0_1_0; }
		
		//('=' default=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//default=STRING
		public Assignment getDefaultAssignment_1_1() { return cDefaultAssignment_1_1; }
		
		//STRING
		public RuleCall getDefaultSTRINGTerminalRuleCall_1_1_0() { return cDefaultSTRINGTerminalRuleCall_1_1_0; }
	}
	public class VertexTraitBoolPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitBoolProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cDefaultTrueKeyword_1_1_0 = (Keyword)cDefaultAssignment_1_1.eContents().get(0);
		
		//VertexTraitBoolProperty:
		//    ('bool'|'boolean') ('=' default?='true')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('bool'|'boolean') ('=' default?='true')?
		public Group getGroup() { return cGroup; }
		
		//('bool'|'boolean')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'bool'
		public Keyword getBoolKeyword_0_0() { return cBoolKeyword_0_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }
		
		//('=' default?='true')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//default?='true'
		public Assignment getDefaultAssignment_1_1() { return cDefaultAssignment_1_1; }
		
		//'true'
		public Keyword getDefaultTrueKeyword_1_1_0() { return cDefaultTrueKeyword_1_1_0; }
	}
	public class VertexTraitStringPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitStringProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cStrKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDefaultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDefaultSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cDefaultAssignment_1_1.eContents().get(0);
		
		//VertexTraitStringProperty:
		//    ('string'|'str') ('=' default=STRING)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('string'|'str') ('=' default=STRING)?
		public Group getGroup() { return cGroup; }
		
		//('string'|'str')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'string'
		public Keyword getStringKeyword_0_0() { return cStringKeyword_0_0; }
		
		//'str'
		public Keyword getStrKeyword_0_1() { return cStrKeyword_0_1; }
		
		//('=' default=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//default=STRING
		public Assignment getDefaultAssignment_1_1() { return cDefaultAssignment_1_1; }
		
		//STRING
		public RuleCall getDefaultSTRINGTerminalRuleCall_1_1_0() { return cDefaultSTRINGTerminalRuleCall_1_1_0; }
	}
	public class VertexTraitArrayPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitArrayProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemTypeVertexTraitPropertyTypeParserRuleCall_2_0 = (RuleCall)cItemTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VertexTraitArrayProperty:
		//    'array' '<' itemType=VertexTraitPropertyType '>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'array' '<' itemType=VertexTraitPropertyType '>'
		public Group getGroup() { return cGroup; }
		
		//'array'
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//itemType=VertexTraitPropertyType
		public Assignment getItemTypeAssignment_2() { return cItemTypeAssignment_2; }
		
		//VertexTraitPropertyType
		public RuleCall getItemTypeVertexTraitPropertyTypeParserRuleCall_2_0() { return cItemTypeVertexTraitPropertyTypeParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class VertexTraitObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeVertexTraitPropertyTypeParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeVertexTraitPropertyTypeParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VertexTraitObjectProperty:
		//    'object' '<' keyType=VertexTraitPropertyType ',' valueType=VertexTraitPropertyType '>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'object' '<' keyType=VertexTraitPropertyType ',' valueType=VertexTraitPropertyType '>'
		public Group getGroup() { return cGroup; }
		
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//keyType=VertexTraitPropertyType
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//VertexTraitPropertyType
		public RuleCall getKeyTypeVertexTraitPropertyTypeParserRuleCall_2_0() { return cKeyTypeVertexTraitPropertyTypeParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//valueType=VertexTraitPropertyType
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }
		
		//VertexTraitPropertyType
		public RuleCall getValueTypeVertexTraitPropertyTypeParserRuleCall_4_0() { return cValueTypeVertexTraitPropertyTypeParserRuleCall_4_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }
	}
	public class VertexTraitPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitPort");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cMultipleAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final Keyword cMultipleMultipleKeyword_0_0 = (Keyword)cMultipleAssignment_0.eContents().get(0);
		private final Assignment cOrderedAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final Keyword cOrderedOrderedKeyword_1_0 = (Keyword)cOrderedAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Assignment cDirectionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDirectionVertexTraitPortDirectionEnumRuleCall_2_0_0 = (RuleCall)cDirectionAssignment_2_0.eContents().get(0);
		private final Keyword cPortKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Keyword cColonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTraitAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cTraitVertexTraitCrossReference_2_4_0 = (CrossReference)cTraitAssignment_2_4.eContents().get(0);
		private final RuleCall cTraitVertexTraitIDTerminalRuleCall_2_4_0_1 = (RuleCall)cTraitVertexTraitCrossReference_2_4_0.eContents().get(1);
		
		//VertexTraitPort:
		//    (multiple?='multiple')? & (ordered?='ordered')? & (direction=VertexTraitPortDirection)?
		//    'port' name=ID ':' trait=[VertexTrait]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(multiple?='multiple')? & (ordered?='ordered')? & (direction=VertexTraitPortDirection)?
		//'port' name=ID ':' trait=[VertexTrait]
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//(multiple?='multiple')?
		public Assignment getMultipleAssignment_0() { return cMultipleAssignment_0; }
		
		//'multiple'
		public Keyword getMultipleMultipleKeyword_0_0() { return cMultipleMultipleKeyword_0_0; }
		
		//(ordered?='ordered')?
		public Assignment getOrderedAssignment_1() { return cOrderedAssignment_1; }
		
		//'ordered'
		public Keyword getOrderedOrderedKeyword_1_0() { return cOrderedOrderedKeyword_1_0; }
		
		//(direction=VertexTraitPortDirection)?
		//   'port' name=ID ':' trait=[VertexTrait]
		public Group getGroup_2() { return cGroup_2; }
		
		//(direction=VertexTraitPortDirection)?
		public Assignment getDirectionAssignment_2_0() { return cDirectionAssignment_2_0; }
		
		//VertexTraitPortDirection
		public RuleCall getDirectionVertexTraitPortDirectionEnumRuleCall_2_0_0() { return cDirectionVertexTraitPortDirectionEnumRuleCall_2_0_0; }
		
		//'port'
		public Keyword getPortKeyword_2_1() { return cPortKeyword_2_1; }
		
		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_3() { return cColonKeyword_2_3; }
		
		//trait=[VertexTrait]
		public Assignment getTraitAssignment_2_4() { return cTraitAssignment_2_4; }
		
		//[VertexTrait]
		public CrossReference getTraitVertexTraitCrossReference_2_4_0() { return cTraitVertexTraitCrossReference_2_4_0; }
		
		//ID
		public RuleCall getTraitVertexTraitIDTerminalRuleCall_2_4_0_1() { return cTraitVertexTraitIDTerminalRuleCall_2_4_0_1; }
	}
	public class EdgeTraitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.EdgeTrait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEdgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRefinesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefinesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefinesEdgeTraitCrossReference_2_1_0 = (CrossReference)cRefinesAssignment_2_1.eContents().get(0);
		private final RuleCall cRefinesEdgeTraitIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefinesEdgeTraitCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cRefinesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cRefinesEdgeTraitCrossReference_2_2_1_0 = (CrossReference)cRefinesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cRefinesEdgeTraitIDTerminalRuleCall_2_2_1_0_1 = (RuleCall)cRefinesEdgeTraitCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpecsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpecsEdgeTraitConstraintParserRuleCall_4_0 = (RuleCall)cSpecsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EdgeTrait:
		//    'edge' name=ID ('refines' refines+=[EdgeTrait] (',' refines+=[EdgeTrait])*)? '{' (specs+=EdgeTraitConstraint)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'edge' name=ID ('refines' refines+=[EdgeTrait] (',' refines+=[EdgeTrait])*)? '{' (specs+=EdgeTraitConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//'edge'
		public Keyword getEdgeKeyword_0() { return cEdgeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('refines' refines+=[EdgeTrait] (',' refines+=[EdgeTrait])*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'refines'
		public Keyword getRefinesKeyword_2_0() { return cRefinesKeyword_2_0; }
		
		//refines+=[EdgeTrait]
		public Assignment getRefinesAssignment_2_1() { return cRefinesAssignment_2_1; }
		
		//[EdgeTrait]
		public CrossReference getRefinesEdgeTraitCrossReference_2_1_0() { return cRefinesEdgeTraitCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRefinesEdgeTraitIDTerminalRuleCall_2_1_0_1() { return cRefinesEdgeTraitIDTerminalRuleCall_2_1_0_1; }
		
		//(',' refines+=[EdgeTrait])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//refines+=[EdgeTrait]
		public Assignment getRefinesAssignment_2_2_1() { return cRefinesAssignment_2_2_1; }
		
		//[EdgeTrait]
		public CrossReference getRefinesEdgeTraitCrossReference_2_2_1_0() { return cRefinesEdgeTraitCrossReference_2_2_1_0; }
		
		//ID
		public RuleCall getRefinesEdgeTraitIDTerminalRuleCall_2_2_1_0_1() { return cRefinesEdgeTraitIDTerminalRuleCall_2_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(specs+=EdgeTraitConstraint)*
		public Assignment getSpecsAssignment_4() { return cSpecsAssignment_4; }
		
		//EdgeTraitConstraint
		public RuleCall getSpecsEdgeTraitConstraintParserRuleCall_4_0() { return cSpecsEdgeTraitConstraintParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EdgeTraitConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.EdgeTraitConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cTargetTargetKeyword_1_0_0 = (Keyword)cTargetAssignment_1_0.eContents().get(0);
		private final Assignment cSourceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSourceSourceKeyword_1_1_0 = (Keyword)cSourceAssignment_1_1.eContents().get(0);
		private final Assignment cFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFilterVertexTraitCrossReference_2_0 = (CrossReference)cFilterAssignment_2.eContents().get(0);
		private final RuleCall cFilterVertexTraitIDTerminalRuleCall_2_0_1 = (RuleCall)cFilterVertexTraitCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFilterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cFilterVertexTraitCrossReference_3_1_0 = (CrossReference)cFilterAssignment_3_1.eContents().get(0);
		private final RuleCall cFilterVertexTraitIDTerminalRuleCall_3_1_0_1 = (RuleCall)cFilterVertexTraitCrossReference_3_1_0.eContents().get(1);
		
		//EdgeTraitConstraint:
		//    'constraint' (target?='target'|source?='source') filter+=[VertexTrait] ('or' filter+=[VertexTrait])*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' (target?='target'|source?='source') filter+=[VertexTrait] ('or' filter+=[VertexTrait])*
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//(target?='target'|source?='source')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//target?='target'
		public Assignment getTargetAssignment_1_0() { return cTargetAssignment_1_0; }
		
		//'target'
		public Keyword getTargetTargetKeyword_1_0_0() { return cTargetTargetKeyword_1_0_0; }
		
		//source?='source'
		public Assignment getSourceAssignment_1_1() { return cSourceAssignment_1_1; }
		
		//'source'
		public Keyword getSourceSourceKeyword_1_1_0() { return cSourceSourceKeyword_1_1_0; }
		
		//filter+=[VertexTrait]
		public Assignment getFilterAssignment_2() { return cFilterAssignment_2; }
		
		//[VertexTrait]
		public CrossReference getFilterVertexTraitCrossReference_2_0() { return cFilterVertexTraitCrossReference_2_0; }
		
		//ID
		public RuleCall getFilterVertexTraitIDTerminalRuleCall_2_0_1() { return cFilterVertexTraitIDTerminalRuleCall_2_0_1; }
		
		//('or' filter+=[VertexTrait])*
		public Group getGroup_3() { return cGroup_3; }
		
		//'or'
		public Keyword getOrKeyword_3_0() { return cOrKeyword_3_0; }
		
		//filter+=[VertexTrait]
		public Assignment getFilterAssignment_3_1() { return cFilterAssignment_3_1; }
		
		//[VertexTrait]
		public CrossReference getFilterVertexTraitCrossReference_3_1_0() { return cFilterVertexTraitCrossReference_3_1_0; }
		
		//ID
		public RuleCall getFilterVertexTraitIDTerminalRuleCall_3_1_0_1() { return cFilterVertexTraitIDTerminalRuleCall_3_1_0_1; }
	}
	
	public class VertexTraitPortDirectionElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "io.github.forsyde.io.Meta.VertexTraitPortDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBIDIRECTIONALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBIDIRECTIONALInoutKeyword_0_0 = (Keyword)cBIDIRECTIONALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBIDIRECTIONALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBIDIRECTIONALOutinKeyword_1_0 = (Keyword)cBIDIRECTIONALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTGOINGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTGOINGOutKeyword_2_0 = (Keyword)cOUTGOINGEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOUTGOINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOUTGOINGOutgoingKeyword_3_0 = (Keyword)cOUTGOINGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINCOMINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINCOMINGInKeyword_4_0 = (Keyword)cINCOMINGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINCOMINGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINCOMINGIncomingKeyword_5_0 = (Keyword)cINCOMINGEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum VertexTraitPortDirection:
		//     BIDIRECTIONAL="inout" | BIDIRECTIONAL="outin" | OUTGOING="out" | OUTGOING="outgoing" | INCOMING="in" | INCOMING="incoming"
		//;
		public EnumRule getRule() { return rule; }
		
		//BIDIRECTIONAL="inout" | BIDIRECTIONAL="outin" | OUTGOING="out" | OUTGOING="outgoing" | INCOMING="in" | INCOMING="incoming"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BIDIRECTIONAL="inout"
		public EnumLiteralDeclaration getBIDIRECTIONALEnumLiteralDeclaration_0() { return cBIDIRECTIONALEnumLiteralDeclaration_0; }
		
		//"inout"
		public Keyword getBIDIRECTIONALInoutKeyword_0_0() { return cBIDIRECTIONALInoutKeyword_0_0; }
		
		//BIDIRECTIONAL="outin"
		public EnumLiteralDeclaration getBIDIRECTIONALEnumLiteralDeclaration_1() { return cBIDIRECTIONALEnumLiteralDeclaration_1; }
		
		//"outin"
		public Keyword getBIDIRECTIONALOutinKeyword_1_0() { return cBIDIRECTIONALOutinKeyword_1_0; }
		
		//OUTGOING="out"
		public EnumLiteralDeclaration getOUTGOINGEnumLiteralDeclaration_2() { return cOUTGOINGEnumLiteralDeclaration_2; }
		
		//"out"
		public Keyword getOUTGOINGOutKeyword_2_0() { return cOUTGOINGOutKeyword_2_0; }
		
		//OUTGOING="outgoing"
		public EnumLiteralDeclaration getOUTGOINGEnumLiteralDeclaration_3() { return cOUTGOINGEnumLiteralDeclaration_3; }
		
		//"outgoing"
		public Keyword getOUTGOINGOutgoingKeyword_3_0() { return cOUTGOINGOutgoingKeyword_3_0; }
		
		//INCOMING="in"
		public EnumLiteralDeclaration getINCOMINGEnumLiteralDeclaration_4() { return cINCOMINGEnumLiteralDeclaration_4; }
		
		//"in"
		public Keyword getINCOMINGInKeyword_4_0() { return cINCOMINGInKeyword_4_0; }
		
		//INCOMING="incoming"
		public EnumLiteralDeclaration getINCOMINGEnumLiteralDeclaration_5() { return cINCOMINGEnumLiteralDeclaration_5; }
		
		//"incoming"
		public Keyword getINCOMINGIncomingKeyword_5_0() { return cINCOMINGIncomingKeyword_5_0; }
	}
	
	private final ModelElements pModel;
	private final VertexTraitElements pVertexTrait;
	private final VertexTraitPropertyElements pVertexTraitProperty;
	private final VertexTraitPropertyTypeElements pVertexTraitPropertyType;
	private final VertexTraitIntPropertyElements pVertexTraitIntProperty;
	private final VertexTraitRealPropertyElements pVertexTraitRealProperty;
	private final VertexTraitBoolPropertyElements pVertexTraitBoolProperty;
	private final VertexTraitStringPropertyElements pVertexTraitStringProperty;
	private final VertexTraitArrayPropertyElements pVertexTraitArrayProperty;
	private final VertexTraitObjectPropertyElements pVertexTraitObjectProperty;
	private final VertexTraitPortElements pVertexTraitPort;
	private final EdgeTraitElements pEdgeTrait;
	private final EdgeTraitConstraintElements pEdgeTraitConstraint;
	private final VertexTraitPortDirectionElements eVertexTraitPortDirection;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MetaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pVertexTrait = new VertexTraitElements();
		this.pVertexTraitProperty = new VertexTraitPropertyElements();
		this.pVertexTraitPropertyType = new VertexTraitPropertyTypeElements();
		this.pVertexTraitIntProperty = new VertexTraitIntPropertyElements();
		this.pVertexTraitRealProperty = new VertexTraitRealPropertyElements();
		this.pVertexTraitBoolProperty = new VertexTraitBoolPropertyElements();
		this.pVertexTraitStringProperty = new VertexTraitStringPropertyElements();
		this.pVertexTraitArrayProperty = new VertexTraitArrayPropertyElements();
		this.pVertexTraitObjectProperty = new VertexTraitObjectPropertyElements();
		this.pVertexTraitPort = new VertexTraitPortElements();
		this.pEdgeTrait = new EdgeTraitElements();
		this.pEdgeTraitConstraint = new EdgeTraitConstraintElements();
		this.eVertexTraitPortDirection = new VertexTraitPortDirectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("io.github.forsyde.io.Meta".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    traits+=(VertexTrait|EdgeTrait)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//VertexTrait:
	//    'vertex' name=ID ('refines' refines+=[VertexTrait] (',' refines+=[VertexTrait])*)?
	//     '(' (ports+=VertexTraitPort)* ')'
	//     '{' (properties+=VertexTraitProperty)* '}'
	//;
	public VertexTraitElements getVertexTraitAccess() {
		return pVertexTrait;
	}
	
	public ParserRule getVertexTraitRule() {
		return getVertexTraitAccess().getRule();
	}
	
	//VertexTraitProperty:
	//    'property' name=ID ':' type=VertexTraitPropertyType
	//;
	public VertexTraitPropertyElements getVertexTraitPropertyAccess() {
		return pVertexTraitProperty;
	}
	
	public ParserRule getVertexTraitPropertyRule() {
		return getVertexTraitPropertyAccess().getRule();
	}
	
	//VertexTraitPropertyType:
	//    VertexTraitIntProperty |
	//    VertexTraitRealProperty |
	//    VertexTraitBoolProperty |
	//    VertexTraitStringProperty |
	//    VertexTraitArrayProperty |
	//    VertexTraitObjectProperty
	//;
	public VertexTraitPropertyTypeElements getVertexTraitPropertyTypeAccess() {
		return pVertexTraitPropertyType;
	}
	
	public ParserRule getVertexTraitPropertyTypeRule() {
		return getVertexTraitPropertyTypeAccess().getRule();
	}
	
	//VertexTraitIntProperty:
	//    ('int'|'integer') ('=' default=INT)?
	//;
	public VertexTraitIntPropertyElements getVertexTraitIntPropertyAccess() {
		return pVertexTraitIntProperty;
	}
	
	public ParserRule getVertexTraitIntPropertyRule() {
		return getVertexTraitIntPropertyAccess().getRule();
	}
	
	//VertexTraitRealProperty:
	//    ('float'|double?='double') ('=' default=STRING)?
	//;
	public VertexTraitRealPropertyElements getVertexTraitRealPropertyAccess() {
		return pVertexTraitRealProperty;
	}
	
	public ParserRule getVertexTraitRealPropertyRule() {
		return getVertexTraitRealPropertyAccess().getRule();
	}
	
	//VertexTraitBoolProperty:
	//    ('bool'|'boolean') ('=' default?='true')?
	//;
	public VertexTraitBoolPropertyElements getVertexTraitBoolPropertyAccess() {
		return pVertexTraitBoolProperty;
	}
	
	public ParserRule getVertexTraitBoolPropertyRule() {
		return getVertexTraitBoolPropertyAccess().getRule();
	}
	
	//VertexTraitStringProperty:
	//    ('string'|'str') ('=' default=STRING)?
	//;
	public VertexTraitStringPropertyElements getVertexTraitStringPropertyAccess() {
		return pVertexTraitStringProperty;
	}
	
	public ParserRule getVertexTraitStringPropertyRule() {
		return getVertexTraitStringPropertyAccess().getRule();
	}
	
	//VertexTraitArrayProperty:
	//    'array' '<' itemType=VertexTraitPropertyType '>'
	//;
	public VertexTraitArrayPropertyElements getVertexTraitArrayPropertyAccess() {
		return pVertexTraitArrayProperty;
	}
	
	public ParserRule getVertexTraitArrayPropertyRule() {
		return getVertexTraitArrayPropertyAccess().getRule();
	}
	
	//VertexTraitObjectProperty:
	//    'object' '<' keyType=VertexTraitPropertyType ',' valueType=VertexTraitPropertyType '>'
	//;
	public VertexTraitObjectPropertyElements getVertexTraitObjectPropertyAccess() {
		return pVertexTraitObjectProperty;
	}
	
	public ParserRule getVertexTraitObjectPropertyRule() {
		return getVertexTraitObjectPropertyAccess().getRule();
	}
	
	//VertexTraitPort:
	//    (multiple?='multiple')? & (ordered?='ordered')? & (direction=VertexTraitPortDirection)?
	//    'port' name=ID ':' trait=[VertexTrait]
	//;
	public VertexTraitPortElements getVertexTraitPortAccess() {
		return pVertexTraitPort;
	}
	
	public ParserRule getVertexTraitPortRule() {
		return getVertexTraitPortAccess().getRule();
	}
	
	//EdgeTrait:
	//    'edge' name=ID ('refines' refines+=[EdgeTrait] (',' refines+=[EdgeTrait])*)? '{' (specs+=EdgeTraitConstraint)* '}'
	//;
	public EdgeTraitElements getEdgeTraitAccess() {
		return pEdgeTrait;
	}
	
	public ParserRule getEdgeTraitRule() {
		return getEdgeTraitAccess().getRule();
	}
	
	//EdgeTraitConstraint:
	//    'constraint' (target?='target'|source?='source') filter+=[VertexTrait] ('or' filter+=[VertexTrait])*
	//;
	public EdgeTraitConstraintElements getEdgeTraitConstraintAccess() {
		return pEdgeTraitConstraint;
	}
	
	public ParserRule getEdgeTraitConstraintRule() {
		return getEdgeTraitConstraintAccess().getRule();
	}
	
	//enum VertexTraitPortDirection:
	//     BIDIRECTIONAL="inout" | BIDIRECTIONAL="outin" | OUTGOING="out" | OUTGOING="outgoing" | INCOMING="in" | INCOMING="incoming"
	//;
	public VertexTraitPortDirectionElements getVertexTraitPortDirectionAccess() {
		return eVertexTraitPortDirection;
	}
	
	public EnumRule getVertexTraitPortDirectionRule() {
		return getVertexTraitPortDirectionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
