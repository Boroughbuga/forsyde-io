import forsyde.io.java.generator.GenerateForSyDeModelTask

plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'java'
  id 'idea'
  id 'eclipse'
  id 'maven'
  id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
  id "org.xtext.builder" version "2.0.8"
  id "org.xtext.xtend" version "2.0.8"
  id "com.github.mrsarm.jshell.plugin" version "1.1.0"
}

tasks.register('generateForSyDeModel', GenerateForSyDeModelTask) {
//  inputs.property('inputModelJson',file('./meta.json'))
//  inputs.property('rootOutDir', file('.'))
}

tasks.compileJava.dependsOn generateForSyDeModel

// due to how maven central works, the groupId must be the same as the
// website which we host
group = 'io.github.forsyde'
archivesBaseName = project.name
version = '0.4.0'


// In this section you declare where to find the dependencies of your project
repositories {
  // Use 'jcenter' for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()
}

// get sources until the developers decide to properly release stuff.
//git {
//  implementation "https://github.com/icyphy/lingua-franca.git", {
//    commit '7473ae1549c2b2aeed8f5469675f328d3984cb2c'
//    projectPath 'org.lflang'
//  }
//}

apply from: "lflang-build.gradle"

// In this section you declare the dependencies for your production and test code
dependencies {
  // The production code uses the SLF4J logging API at compile time
  implementation 'org.slf4j:slf4j-api:1.7.32'
  implementation group: 'org.jgrapht', name: 'jgrapht-core', version: '1.5.1'
  implementation group: 'org.jgrapht', name: 'jgrapht-io', version: '1.5.1'
  // these two are intrusive results of lingua franca
  implementation 'org.eclipse.xtend:org.eclipse.xtend.lib:2.25.0'
  implementation 'commons-cli:commons-cli:1.4'

  implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '3.0.1'
  // https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api


  compileOnly "org.derive4j:derive4j-annotation:1.1.1"
  annotationProcessor "org.derive4j:derive4j:1.1.1"


  // implementation('org.lflang:org.lflang')
  // AMALTHEA connection
  implementation 'org.eclipse.app4mc:org.eclipse.app4mc.amalthea.model:1.1.0'

  testImplementation 'junit:junit:4.12'
}

sourceCompatibility = 1.11

sourceSets {
  main {
    java {
      srcDirs += ['src-gen/main/java']
    }
  }
}

java {
  withSourcesJar()
  withJavadocJar()
}

jar {
    archiveFileName = "${project.name}" + '-' + "${project.version}" + '.jar'
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = project.name
      from components.java
      pom {
        name = 'ForSyDe IO Java'
        description = 'ForSyDe IO Java (+JVM) supporting library'
        url = 'https://github.com/forsyde/forsyde-io'
        packaging = 'jar'
        scm {
          connection = 'scm:git:https://github.com/forsyde/forsyde-io.git'
          developerConnection = 'scm:git:git@github.com:forsyde/forsyde-io.git'
          url = 'https://github.com/forsyde/forsyde-io'
        }
        licenses {
          license {
            name = 'The MIT License'
            url = 'https://choosealicense.com/licenses/mit/'
          }
        }
        developers {
          developer {
            id = 'Jordao'
            name = 'Rodolfo Jordao'
            email = 'jordao@kth.se'
          }
        }
      }
    }
  }
  repositories {
    maven {
      name = 'OSSRH'
      url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      credentials {
        username = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('MAVEN_USERNAME') ?: System.getenv('OSSRH_USERNAME') ?: ''
        password = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('MAVEN_PASSWORD') ?: System.getenv('OSSRH_PASSWORD') ?: ''
      }
    }
  // maven {
  //   name = "GitHubPackages"
  //   url = uri("https://maven.pkg.github.com/forsyde/forsyde-io")
  //   credentials {
  //     username = System.getenv("GITHUB_ACTOR") ?: ""
  //     password = System.getenv("GITHUB_TOKEN") ?: ""
  //   }
  // }
  }
}

nexusPublishing {
  repositories {
    sonatype {
      username = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('MAVEN_USERNAME') ?: System.getenv('OSSRH_USERNAME') ?: ''
      password = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('MAVEN_PASSWORD') ?: System.getenv('OSSRH_PASSWORD') ?: ''
    }
  }
}

test {
    useJUnit()
    maxHeapSize = '1G'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
  // small hack to work offline or online
  if (project.hasProperty('signing.keyId')) {
    useGpgCmd()
  } else {
    useInMemoryPgpKeys(
      System.getenv('GPG_SIGNING_KEY') ?: findProperty('signing.key'),
      System.getenv('GPG_SIGNING_PASSWORD') ?: findProperty('signing.password') ?: '' //default to an empty password
    )
  }
  sign publishing.publications.mavenJava
  sign configurations.archives
}
