buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.squareup:javapoet:1.13.0'
    classpath group: 'org.jgrapht', name: 'jgrapht-core', version: '1.5.0'
  }
}

import groovy.json.JsonSlurper
import javax.lang.model.element.Modifier

import com.squareup.javapoet.TypeSpec
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.JavaFile

import org.jgrapht.*;
import org.jgrapht.graph.*;
import org.jgrapht.traverse.*;


task generateVertexTraits {
    def modelStr = file('meta.json').text
    def traitClass = ClassName.get("forsyde.io.java.core", "Trait")
    def model = new JsonSlurper().parseText(modelStr)
    // first build the trait graph
    def traitGraph = new SimpleDirectedGraph<String, DefaultEdge>(DefaultEdge.class);
    for (vertexTrait in model['vertexTraits']) {
    	traitGraph.addVertex(vertexTrait.key)	
    }
    for (vertexTrait in model['vertexTraits']) {
    	if (vertexTrait.value) {
		    for (superTrait in vertexTrait.value['superTraits']) {
				traitGraph.addEdge(vertexTrait.key, superTrait)    		
			}
		}
	}
    // now spit the LUTs for the enums
    def vertexEnum = TypeSpec.enumBuilder("VertexTrait")
        .addSuperinterface(traitClass)
        .addModifiers(Modifier.PUBLIC)
    def refinesMethod = MethodSpec.methodBuilder("refines")
    	.returns(TypeName.BOOLEAN)
    	.addModifiers(Modifier.PUBLIC, Modifier.STATIC)
    	.addParameter(ClassName.get("forsyde.io.java.core", "VertexTrait"), "one")
    	.addParameter(ClassName.get("forsyde.io.java.core", "VertexTrait"), "other")
    	.beginControlFlow("switch (one)")
    for (vertexTrait in model['vertexTraits']) {
        vertexEnum.addEnumConstant(vertexTrait.key)
        refinesMethod.addCode("case " + vertexTrait.key + ":\n")
        refinesMethod.beginControlFlow("switch (other)")
	    def superIterator = new DepthFirstIterator<String, DefaultEdge>(traitGraph, vertexTrait.key)
	    while (superIterator.hasNext()) {
			def superTrait = superIterator.next() 	    
			refinesMethod.addCode("case " + superTrait + ": ")
        	refinesMethod.addStatement("return true")
	    }
        refinesMethod.addStatement("default: return false")
        refinesMethod.endControlFlow()
    }
    refinesMethod.addStatement("default: return false")
    refinesMethod.endControlFlow()
    vertexEnum.addMethod(refinesMethod.build())
    vertexEnum.addMethod(
    	MethodSpec.methodBuilder("refines")
    	.returns(TypeName.BOOLEAN)
    	.addModifiers(Modifier.PUBLIC)
    	.addParameter(ClassName.get("forsyde.io.java.core", "Trait"), "other")
    	.addStatement("return other instanceof VertexTrait ? VertexTrait.refines(this, (VertexTrait) other) : false")
    	.build()
    )
    vertexEnum.addMethod(
    	MethodSpec.methodBuilder("getName")
    	.returns(ClassName.bestGuess("java.lang.String"))
    	.addModifiers(Modifier.PUBLIC)
    	.addStatement("return this.toString()")
    	.build()
    )
    // write down these nice generated enums
    def fileStr = JavaFile.builder('forsyde.io.java.core', vertexEnum.build())
    file('src-gen/main/java/forsyde/io/java/core').mkdirs()
    file('src-gen/main/java/forsyde/io/java/core/VertexTrait.java').text = fileStr.build()
}

task generateEdgeTraits {
    def modelStr = file('meta.json').text
    def traitClass = ClassName.get("forsyde.io.java.core", "Trait")
    def model = new JsonSlurper().parseText(modelStr)
    // first build the trait graph
    def traitGraph = new SimpleDirectedGraph<String, DefaultEdge>(DefaultEdge.class);
    for (edgeTrait in model['edgeTraits']) {
    	traitGraph.addVertex(edgeTrait.key)	
    }
    for (edgeTrait in model['edgeTraits']) {
    	if (edgeTrait.value) {
		    for (superTrait in edgeTrait.value['superTraits']) {
				traitGraph.addEdge(edgeTrait.key, superTrait)    		
			}
		}
	}
    // now spit the LUTs for the enums
    def edgeEnum = TypeSpec.enumBuilder("EdgeTrait")
        .addSuperinterface(traitClass)
        .addModifiers(Modifier.PUBLIC)
    def refinesMethod = MethodSpec.methodBuilder("refines")
    	.returns(TypeName.BOOLEAN)
    	.addModifiers(Modifier.PUBLIC, Modifier.STATIC)
    	.addParameter(ClassName.get("forsyde.io.java.core", "EdgeTrait"), "one")
    	.addParameter(ClassName.get("forsyde.io.java.core", "EdgeTrait"), "other")
    	.beginControlFlow("switch (one)")
    for (edgeTrait in model['edgeTraits']) {
        edgeEnum.addEnumConstant(edgeTrait.key)
        refinesMethod.addCode("case " + edgeTrait.key + ":\n")
        refinesMethod.beginControlFlow("switch (other)")
	    def superIterator = new DepthFirstIterator<String, DefaultEdge>(traitGraph, edgeTrait.key)
	    while (superIterator.hasNext()) {
			def superTrait = superIterator.next() 	    
			refinesMethod.addCode("case " + superTrait + ": ")
        	refinesMethod.addStatement("return true")
	    }
        refinesMethod.addStatement("default: return false")
        refinesMethod.endControlFlow()
    }
    refinesMethod.addStatement("default: return false")
    refinesMethod.endControlFlow()
    edgeEnum.addMethod(refinesMethod.build())
    edgeEnum.addMethod(
    	MethodSpec.methodBuilder("refines")
    	.returns(TypeName.BOOLEAN)
    	.addModifiers(Modifier.PUBLIC)
    	.addParameter(ClassName.get("forsyde.io.java.core", "Trait"), "other")
    	.addStatement("return other instanceof EdgeTrait ? EdgeTrait.refines(this, (EdgeTrait) other) : false")
    	.build()
    )
    edgeEnum.addMethod(
    	MethodSpec.methodBuilder("getName")
    	.returns(ClassName.bestGuess("java.lang.String"))
    	.addModifiers(Modifier.PUBLIC)
    	.addStatement("return this.toString()")
    	.build()
    )
    // write down these nice generated enums
    def fileStr = JavaFile.builder('forsyde.io.java.core', edgeEnum.build())
    file('src-gen/main/java/forsyde/io/java/core').mkdirs()
    file('src-gen/main/java/forsyde/io/java/core/EdgeTrait.java').text = fileStr.build()
} 